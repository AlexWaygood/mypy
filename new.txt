Module(body=[Expr(value=Constant(value="Facilities for generating error messages during type checking.\n\nDon't add any non-trivial message construction logic to the type\nchecker, as it can compromise clarity and make messages less\nconsistent. Add such logic to this module instead. Literal messages, including those\nwith format args, should be defined as constants in mypy.message_registry.\n\nHistorically we tried to avoid all message string literals in the type\nchecker but we are moving away from this convention.\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='difflib')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='re')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Collection'), alias(name='Final'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='Sequence'), alias(name='cast')], level=0), Import(names=[alias(name='mypy.typeops')]), ImportFrom(module='mypy', names=[alias(name='errorcodes', asname='codes'), alias(name='message_registry')], level=0), ImportFrom(module='mypy.erasetype', names=[alias(name='erase_type')], level=0), ImportFrom(module='mypy.errorcodes', names=[alias(name='ErrorCode')], level=0), ImportFrom(module='mypy.errors', names=[alias(name='ErrorInfo'), alias(name='Errors'), alias(name='ErrorWatcher')], level=0), ImportFrom(module='mypy.nodes', names=[alias(name='ARG_NAMED'), alias(name='ARG_NAMED_OPT'), alias(name='ARG_OPT'), alias(name='ARG_POS'), alias(name='ARG_STAR'), alias(name='ARG_STAR2'), alias(name='CONTRAVARIANT'), alias(name='COVARIANT'), alias(name='SYMBOL_FUNCBASE_TYPES'), alias(name='ArgKind'), alias(name='CallExpr'), alias(name='ClassDef'), alias(name='Context'), alias(name='Expression'), alias(name='FuncDef'), alias(name='IndexExpr'), alias(name='MypyFile'), alias(name='NameExpr'), alias(name='ReturnStmt'), alias(name='StrExpr'), alias(name='SymbolNode'), alias(name='SymbolTable'), alias(name='TypeInfo'), alias(name='Var'), alias(name='reverse_builtin_aliases')], level=0), ImportFrom(module='mypy.operators', names=[alias(name='op_methods'), alias(name='op_methods_to_symbols')], level=0), ImportFrom(module='mypy.options', names=[alias(name='Options')], level=0), ImportFrom(module='mypy.subtypes', names=[alias(name='IS_CLASS_OR_STATIC'), alias(name='IS_CLASSVAR'), alias(name='IS_SETTABLE'), alias(name='IS_VAR'), alias(name='find_member'), alias(name='get_member_flags'), alias(name='is_same_type'), alias(name='is_subtype')], level=0), ImportFrom(module='mypy.typeops', names=[alias(name='separate_union_literals')], level=0), ImportFrom(module='mypy.types', names=[alias(name='AnyType'), alias(name='CallableType'), alias(name='DeletedType'), alias(name='FunctionLike'), alias(name='Instance'), alias(name='LiteralType'), alias(name='NoneType'), alias(name='Overloaded'), alias(name='Parameters'), alias(name='ParamSpecType'), alias(name='PartialType'), alias(name='ProperType'), alias(name='TupleType'), alias(name='Type'), alias(name='TypeAliasType'), alias(name='TypedDictType'), alias(name='TypeOfAny'), alias(name='TypeStrVisitor'), alias(name='TypeType'), alias(name='TypeVarTupleType'), alias(name='TypeVarType'), alias(name='UnboundType'), alias(name='UninhabitedType'), alias(name='UnionType'), alias(name='UnpackType'), alias(name='get_proper_type'), alias(name='get_proper_types')], level=0), ImportFrom(module='mypy.typetraverser', names=[alias(name='TypeTraverserVisitor')], level=0), ImportFrom(module='mypy.util', names=[alias(name='plural_s'), alias(name='unmangle')], level=0), AnnAssign(target=Name(id='TYPES_FOR_UNIMPORTED_HINTS', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Set(elts=[Constant(value='typing.Any'), Constant(value='typing.Callable'), Constant(value='typing.Dict'), Constant(value='typing.Iterable'), Constant(value='typing.Iterator'), Constant(value='typing.List'), Constant(value='typing.Optional'), Constant(value='typing.Set'), Constant(value='typing.Tuple'), Constant(value='typing.TypeVar'), Constant(value='typing.Union'), Constant(value='typing.cast')]), simple=1), AnnAssign(target=Name(id='ARG_CONSTRUCTOR_NAMES', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Dict(keys=[Name(id='ARG_POS', ctx=Load()), Name(id='ARG_OPT', ctx=Load()), Name(id='ARG_NAMED', ctx=Load()), Name(id='ARG_NAMED_OPT', ctx=Load()), Name(id='ARG_STAR', ctx=Load()), Name(id='ARG_STAR2', ctx=Load())], values=[Constant(value='Arg'), Constant(value='DefaultArg'), Constant(value='NamedArg'), Constant(value='DefaultNamedArg'), Constant(value='VarArg'), Constant(value='KwArg')]), simple=1), AnnAssign(target=Name(id='SUGGESTED_TEST_FIXTURES', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Dict(keys=[Constant(value='builtins.set'), Constant(value='builtins.tuple'), Constant(value='builtins.bool'), Constant(value='builtins.Exception'), Constant(value='builtins.BaseException'), Constant(value='builtins.isinstance'), Constant(value='builtins.property'), Constant(value='builtins.classmethod'), Constant(value='typing._SpecialForm')], values=[Constant(value='set.pyi'), Constant(value='tuple.pyi'), Constant(value='bool.pyi'), Constant(value='exception.pyi'), Constant(value='exception.pyi'), Constant(value='isinstancelist.pyi'), Constant(value='property.pyi'), Constant(value='classmethod.pyi'), Constant(value='typing-medium.pyi')]), simple=1), AnnAssign(target=Name(id='UNSUPPORTED_NUMBERS_TYPES', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Set(elts=[Constant(value='numbers.Number'), Constant(value='numbers.Complex'), Constant(value='numbers.Real'), Constant(value='numbers.Rational'), Constant(value='numbers.Integral')]), simple=1), ClassDef(name='MessageBuilder', bases=[], keywords=[], body=[Expr(value=Constant(value="Helper class for reporting type checker error messages with parameters.\n\n    The methods of this class need to be provided with the context within a\n    file; the errors member manages the wider context.\n\n    IDEA: Support a 'verbose mode' that includes full information about types\n          in error messages and that may otherwise produce more detailed error\n          messages.\n    ")), AnnAssign(target=Name(id='errors', ctx=Store()), annotation=Name(id='Errors', ctx=Load()), simple=1), AnnAssign(target=Name(id='modules', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='MypyFile', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_disable_type_names', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='errors', annotation=Name(id='Errors', ctx=Load())), arg(arg='modules', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='MypyFile', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Store())], value=Name(id='errors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Attribute(value=Name(id='errors', ctx=Load()), attr='options', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='modules', ctx=Store())], value=Name(id='modules', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_disable_type_names', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='filter_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='filter_errors', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='ErrorInfo', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='save_filtered_errors', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=False)], defaults=[]), body=[Return(value=Call(func=Name(id='ErrorWatcher', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load())], keywords=[keyword(arg='filter_errors', value=Name(id='filter_errors', ctx=Load())), keyword(arg='save_filtered_errors', value=Name(id='save_filtered_errors', ctx=Load()))]))], decorator_list=[], returns=Name(id='ErrorWatcher', ctx=Load()), type_params=[]), FunctionDef(name='add_errors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='errors', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='ErrorInfo', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add errors in messages to this builder.')), For(target=Name(id='info', ctx=Store()), iter=Name(id='errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='add_error_info', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='disable_type_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_disable_type_names', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=True)], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_disable_type_names', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load()), type_params=[]), FunctionDef(name='are_type_names_disabled', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_disable_type_names', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_disable_type_names', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), FunctionDef(name='prefer_simple_messages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Should we generate simple/fast error messages?\n\n        If errors aren't shown to the user, we don't want to waste cyles producing\n        complex error messages.\n        ")), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), FunctionDef(name='report', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='severity', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='file', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='origin', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load())), arg(arg='secondary_context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=False), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Report an error or note (unless disabled).\n\n        Note that context controls where error is reported, while origin controls\n        where # type: ignore comments have effect.\n        ')), FunctionDef(name='span_from_context', args=arguments(posonlyargs=[], args=[arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This determines where a type: ignore for a given context has effect.\n\n            Current logic is a bit tricky, to keep as much backwards compatibility as\n            possible. We may reconsider this to always be a single line (or otherwise\n            simplify it) when we drop Python 3.7.\n\n            TODO: address this in follow up PR\n            ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Tuple(elts=[Name(id='ClassDef', ctx=Load()), Name(id='FuncDef', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='range', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='ctx', ctx=Load()), attr='deco_line', ctx=Load()), Attribute(value=Name(id='ctx', ctx=Load()), attr='line', ctx=Load())]), BinOp(left=Attribute(value=Name(id='ctx', ctx=Load()), attr='line', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='Expression', ctx=Load())], keywords=[])), body=[Return(value=List(elts=[Attribute(value=Name(id='ctx', ctx=Load()), attr='line', ctx=Load())], ctx=Load()))], orelse=[Return(value=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='ctx', ctx=Load()), attr='line', ctx=Load()), BinOp(left=BoolOp(op=Or(), values=[Attribute(value=Name(id='ctx', ctx=Load()), attr='end_line', ctx=Load()), Attribute(value=Name(id='ctx', ctx=Load()), attr='line', ctx=Load())]), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), type_params=[]), AnnAssign(target=Name(id='origin_span', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Compare(left=Name(id='origin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='origin_span', ctx=Store())], value=Call(func=Name(id='span_from_context', ctx=Load()), args=[Name(id='origin', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='origin_span', ctx=Store())], value=Call(func=Name(id='span_from_context', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='origin_span', ctx=Store())], value=Constant(value=None))])]), If(test=Compare(left=Name(id='secondary_context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Compare(left=Name(id='origin_span', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='origin_span', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='origin_span', ctx=Load()), Call(func=Name(id='span_from_context', ctx=Load()), args=[Name(id='secondary_context', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='report', ctx=Load()), args=[IfExp(test=Name(id='context', ctx=Load()), body=Attribute(value=Name(id='context', ctx=Load()), attr='line', ctx=Load()), orelse=UnaryOp(op=USub(), operand=Constant(value=1))), IfExp(test=Name(id='context', ctx=Load()), body=Attribute(value=Name(id='context', ctx=Load()), attr='column', ctx=Load()), orelse=UnaryOp(op=USub(), operand=Constant(value=1))), Name(id='msg', ctx=Load())], keywords=[keyword(arg='severity', value=Name(id='severity', ctx=Load())), keyword(arg='file', value=Name(id='file', ctx=Load())), keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='origin_span', value=Name(id='origin_span', ctx=Load())), keyword(arg='end_line', value=IfExp(test=Name(id='context', ctx=Load()), body=Attribute(value=Name(id='context', ctx=Load()), attr='end_line', ctx=Load()), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))), keyword(arg='end_column', value=IfExp(test=Name(id='context', ctx=Load()), body=Attribute(value=Name(id='context', ctx=Load()), attr='end_column', ctx=Load()), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))), keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='fail', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='file', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load())), arg(arg='secondary_context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Report an error message (unless disabled).')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load()), Constant(value='error')], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='file', value=Name(id='file', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='note', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='file', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='origin', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='secondary_context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=False)]), body=[Expr(value=Constant(value='Report a note (unless disabled).')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load()), Constant(value='note')], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load())), keyword(arg='origin', value=Name(id='origin', ctx=Load())), keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='note_multiline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='messages', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='file', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[arg(arg='secondary_context', annotation=BinOp(left=Name(id='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None)], defaults=[Constant(value=None), Constant(value=0), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Report as many notes as lines in the message (unless disabled).')), For(target=Name(id='msg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='messages', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load()), Constant(value='note')], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load())), keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='has_no_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='original_type', annotation=Name(id='Type', ctx=Load())), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='member', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='module_symbol_table', annotation=BinOp(left=Name(id='SymbolTable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Report a missing or non-accessible member.\n\n        original_type is the top-level type on which the error occurred.\n        typ is the actual type that is missing the member. These can be\n        different, e.g., in a union, original_type will be the union and typ\n        will be the specific item in the union that does not have the member\n        attribute.\n\n        'module_symbol_table' is passed to this function if the type for which we\n        are trying to get a member was originally a module. The SymbolTable allows\n        us to look up and suggests attributes of the module since they are not\n        directly available on original_type\n\n        If member corresponds to an operator, use the corresponding operator\n        name in the messages. Return the error code that was produced, if any.\n        ")), Assign(targets=[Name(id='original_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='original_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='typ', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='original_type', ctx=Load()), attr='type', ctx=Load()), attr='has_readable_member', ctx=Load()), args=[Name(id='member', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Member "'), FormattedValue(value=Name(id='member', ctx=Load()), conversion=-1), Constant(value='" is not assignable')]), Name(id='context', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__contains__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported right operand type for in ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='op_methods', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])]), body=[For(target=Tuple(elts=[Name(id='op', ctx=Store()), Name(id='method', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='op_methods', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Name(id='member', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unsupported_left_operand', ctx=Load()), args=[Name(id='op', ctx=Load()), Name(id='original_type', ctx=Load()), Name(id='context', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__neg__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported operand type for unary - ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__pos__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported operand type for unary + ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__invert__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported operand type for ~ ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__getitem__')]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='FunctionLike', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='original_type', ctx=Load()), attr='is_type_obj', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='The type {} is not generic and not indexable'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Value of type '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is not indexable')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__setitem__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported target for indexed assignment ({})'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__call__')]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='original_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.function')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Cannot call function of unknown type'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='message_registry', ctx=Load()), attr='NOT_CALLABLE', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))])], orelse=[Assign(targets=[Name(id='extra', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__iter__')]), body=[Assign(targets=[Name(id='extra', ctx=Store())], value=Constant(value=' (not iterable)'))], orelse=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__aiter__')]), body=[Assign(targets=[Name(id='extra', ctx=Store())], value=Constant(value=' (not async iterable)'))], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='are_type_names_disabled', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='failed', ctx=Store())], value=Constant(value=False)), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='original_type', ctx=Load()), attr='type', ctx=Load()), attr='names', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='module_symbol_table', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='member', ctx=Load()), ops=[In()], comparators=[Name(id='module_symbol_table', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Subscript(value=Name(id='module_symbol_table', ctx=Load()), slice=Name(id='member', ctx=Load()), ctx=Load()), attr='module_public', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='module_names', value=Constant(value=True))]), conversion=-1), Constant(value=' does not explicitly export attribute "'), FormattedValue(value=Name(id='member', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))])), Assign(targets=[Name(id='failed', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='alternatives', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='original_type', ctx=Load()), attr='type', ctx=Load()), attr='names', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='module_symbol_table', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='alternatives', ctx=Store()), op=BitOr(), value=SetComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='module_symbol_table', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Attribute(value=Name(id='v', ctx=Load()), attr='module_public', ctx=Load())], is_async=0)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='alternatives', ctx=Load()), attr='discard', ctx=Load()), args=[Name(id='member', ctx=Load())], keywords=[])), Assign(targets=[Name(id='matches', ctx=Store())], value=ListComp(elt=Name(id='m', ctx=Load()), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='COMMON_MISTAKES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='member', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='m', ctx=Load()), ops=[In()], comparators=[Name(id='alternatives', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='best_matches', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='alternatives', ctx=Load())], keywords=[keyword(arg='n', value=Constant(value=3))])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='member', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__aiter__')]), Compare(left=Name(id='matches', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='__iter__')], ctx=Load())])]), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Name(id='matches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} has no attribute "{}"; maybe {}?{}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Name(id='member', ctx=Load()), Call(func=Name(id='pretty_seq', ctx=Load()), args=[Name(id='matches', ctx=Load()), Constant(value='or')], keywords=[]), Name(id='extra', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))])), Assign(targets=[Name(id='failed', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='failed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} has no attribute "{}"{}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Name(id='member', ctx=Load()), Name(id='extra', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))]))], orelse=[]), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='UnionType', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='typ_format', ctx=Store()), Name(id='orig_type_format', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='original_type', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='typ_format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='"object"')]), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='NoneType', ctx=Load())]), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='original_type', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Assign(targets=[Name(id='typ_format', ctx=Store())], value=Constant(value='"None"'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Item {} of {} has no attribute "{}"{}'), attr='format', ctx=Load()), args=[Name(id='typ_format', ctx=Load()), Name(id='orig_type_format', ctx=Load()), Name(id='member', ctx=Load()), Name(id='extra', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNION_ATTR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNION_ATTR', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Name(id='TypeVarType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='bound', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Attribute(value=Name(id='original_type', ctx=Load()), attr='upper_bound', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='bound', ctx=Load()), Name(id='UnionType', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='typ_fmt', ctx=Store()), Name(id='bound_fmt', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='bound', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='original_type_fmt', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Item {} of the upper bound {} of type variable {} has no attribute "{}"{}'), attr='format', ctx=Load()), args=[Name(id='typ_fmt', ctx=Load()), Name(id='bound_fmt', ctx=Load()), Name(id='original_type_fmt', ctx=Load()), Name(id='member', ctx=Load()), Name(id='extra', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNION_ATTR', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNION_ATTR', ctx=Load()))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} has no attribute "{}"{}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Name(id='member', ctx=Load()), Name(id='extra', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='ATTR_DEFINED', ctx=Load()))])])])])])])])])])])])]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)), type_params=[]), FunctionDef(name='unsupported_operand_types', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='left_type', annotation=Name(id='Any', ctx=Load())), arg(arg='right_type', annotation=Name(id='Any', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=Name(id='ErrorCode', ctx=Load()))], kw_defaults=[Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='Report unsupported operand types for a binary operation.\n\n        Types can be Type objects or strings.\n        ')), Assign(targets=[Name(id='left_str', ctx=Store())], value=Constant(value='')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left_type', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='left_str', ctx=Store())], value=Name(id='left_type', ctx=Load()))], orelse=[Assign(targets=[Name(id='left_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='left_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='right_str', ctx=Store())], value=Constant(value='')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='right_type', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='right_str', ctx=Store())], value=Name(id='right_type', ctx=Load()))], orelse=[Assign(targets=[Name(id='right_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='right_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='are_type_names_disabled', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Unsupported operand types for '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' (likely involving Union)')]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Unsupported operand types for '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='left_str', ctx=Load()), conversion=-1), Constant(value=' and '), FormattedValue(value=Name(id='right_str', ctx=Load()), conversion=-1), Constant(value=')')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unsupported_left_operand', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='are_type_names_disabled', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Unsupported left operand type for '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' (some union)')]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Unsupported left operand type for '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='not_callable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='message_registry', ctx=Load()), attr='NOT_CALLABLE', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='AnyType', ctx=Load()), args=[Attribute(value=Name(id='TypeOfAny', ctx=Load()), attr='from_error', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Type', ctx=Load()), type_params=[]), FunctionDef(name='untyped_function_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]), Constant(value='(unknown)')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Call to untyped function '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' in typed context')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='NO_UNTYPED_CALL', ctx=Load()))])), Return(value=Call(func=Name(id='AnyType', ctx=Load()), args=[Attribute(value=Name(id='TypeOfAny', ctx=Load()), attr='from_error', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Type', ctx=Load()), type_params=[]), FunctionDef(name='incompatible_argument', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='m', annotation=Name(id='int', ctx=Load())), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='arg_type', annotation=Name(id='Type', ctx=Load())), arg(arg='arg_kind', annotation=Name(id='ArgKind', ctx=Load())), arg(arg='object_type', annotation=BinOp(left=Name(id='Type', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='outer_context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Report an error about an incompatible argument type.\n\n        The argument type is arg_type, argument number is n and the\n        callee type is 'callee'. If the callee represents a method\n        that corresponds to an operator, use the corresponding\n        operator name in the messages.\n\n        Return the error code that used for the argument (multiple error\n        codes are possible).\n        ")), Assign(targets=[Name(id='arg_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='arg_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='callee_name', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Name(id='callee_name', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='callee', ctx=Load()), attr='bound_args', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='bound_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='bound_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Name(id='extract_type', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))]), For(target=Tuple(elts=[Name(id='method', ctx=Store()), Name(id='op', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='op_methods_to_symbols', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='variant', ctx=Store()), iter=Tuple(elts=[Name(id='method', ctx=Load()), BinOp(left=Constant(value='__r'), op=Add(), right=Subscript(value=Name(id='method', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='variant', ctx=Load()), conversion=-1), Constant(value='" of')])], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='op', ctx=Load()), ops=[Eq()], comparators=[Constant(value='in')]), Compare(left=Name(id='variant', ctx=Load()), ops=[NotEq()], comparators=[Name(id='method', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unsupported_operand_types', ctx=Load()), args=[Name(id='op', ctx=Load()), Name(id='arg_type', ctx=Load()), Name(id='base', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unsupported_operand_types', ctx=Load()), args=[Name(id='op', ctx=Load()), Name(id='base', ctx=Load()), Name(id='arg_type', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))]))]), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"__getitem__" of')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_index_type', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Name(id='base', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"__setitem__" of')], keywords=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_index_type', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Name(id='base', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))])), Return(value=Attribute(value=Name(id='codes', ctx=Load()), attr='INDEX', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='arg_type_str', ctx=Store()), Name(id='callee_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='info', ctx=Store())], value=JoinedStr(values=[Constant(value=' (expression has type '), FormattedValue(value=Name(id='arg_type_str', ctx=Load()), conversion=-1), Constant(value=', target has type '), FormattedValue(value=Name(id='callee_type_str', ctx=Load()), conversion=-1), Constant(value=')')])), Assign(targets=[Name(id='error_msg', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='message_registry', ctx=Load()), attr='INCOMPATIBLE_TYPES_IN_ASSIGNMENT', ctx=Load()), attr='with_additional_msg', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Attribute(value=Name(id='error_msg', ctx=Load()), attr='value', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='error_msg', ctx=Load()), attr='code', ctx=Load()))])), Return(value=Attribute(value=Name(id='error_msg', ctx=Load()), attr='code', ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='target', ctx=Store())], value=JoinedStr(values=[Constant(value='to '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' ')]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='MISC', ctx=Load())), AnnAssign(target=Name(id='notes', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<list>')]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='callee_name', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), AugAssign(target=Name(id='n', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='actual_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} item {} has incompatible type {}; expected {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[]), Name(id='n', ctx=Load()), Name(id='actual_type_str', ctx=Load()), Name(id='expected_type_str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='LIST_ITEM', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<dict>')]), Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Name(id='get_proper_type', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), Name(id='TupleType', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='callee_name', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), AugAssign(target=Name(id='n', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='key_type', ctx=Store()), Name(id='value_type', ctx=Store())], ctx=Store())], value=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TupleType', ctx=Load()), Name(id='arg_type', ctx=Load())], keywords=[]), attr='items', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='expected_key_type', ctx=Store()), Name(id='expected_value_type', ctx=Store())], ctx=Store())], value=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TupleType', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load())], keywords=[]), attr='items', ctx=Load())), If(test=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='key_type', ctx=Load()), Name(id='expected_key_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='key_type_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='key_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_key_type_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='expected_key_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='key_type_str', ctx=Store()), Name(id='expected_key_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='key_type', ctx=Load()), Name(id='expected_key_type', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))]))]), If(test=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='value_type', ctx=Load()), Name(id='expected_value_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value_type_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='value_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_value_type_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='expected_value_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='value_type_str', ctx=Store()), Name(id='expected_value_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='value_type', ctx=Load()), Name(id='expected_value_type', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))]))]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} entry {} has incompatible type {}: {}; expected {}: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[]), Name(id='n', ctx=Load()), Name(id='key_type_str', ctx=Load()), Name(id='value_type_str', ctx=Load()), Name(id='expected_key_type_str', ctx=Load()), Name(id='expected_value_type_str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='DICT_ITEM', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<dict>')]), body=[Assign(targets=[Tuple(elts=[Name(id='value_type_str', ctx=Store()), Name(id='expected_value_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Unpacked dict entry {} has incompatible type {}; expected {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='value_type_str', ctx=Load()), Name(id='expected_value_type_str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='DICT_ITEM', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<list-comprehension>')]), body=[Assign(targets=[Tuple(elts=[Name(id='actual_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='strip_quotes', ctx=Load()), Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='List comprehension has incompatible type List[{}]; expected List[{}]'), attr='format', ctx=Load()), args=[Name(id='actual_type_str', ctx=Load()), Name(id='expected_type_str', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<set-comprehension>')]), body=[Assign(targets=[Tuple(elts=[Name(id='actual_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='strip_quotes', ctx=Load()), Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Set comprehension has incompatible type Set[{}]; expected Set[{}]'), attr='format', ctx=Load()), args=[Name(id='actual_type_str', ctx=Load()), Name(id='expected_type_str', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<dictionary-comprehension>')]), body=[Assign(targets=[Tuple(elts=[Name(id='actual_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} expression in dictionary comprehension has incompatible type {}; expected type {}'), attr='format', ctx=Load()), args=[IfExp(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='Key'), orelse=Constant(value='Value')), Name(id='actual_type_str', ctx=Load()), Name(id='expected_type_str', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<generator>')]), body=[Assign(targets=[Tuple(elts=[Name(id='actual_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Generator has incompatible item type {}; expected {}'), attr='format', ctx=Load()), args=[Name(id='actual_type_str', ctx=Load()), Name(id='expected_type_str', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Argument has incompatible type'))], orelse=[Try(body=[Assign(targets=[Name(id='expected_type', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=BinOp(left=Name(id='m', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='expected_type', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Tuple(elts=[Name(id='arg_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Name(id='expected_type', ctx=Load())], keywords=[keyword(arg='bare', value=Constant(value=True)), keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), If(test=Compare(left=Name(id='arg_kind', ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR', ctx=Load())]), body=[Assign(targets=[Name(id='arg_type_str', ctx=Store())], value=BinOp(left=Constant(value='*'), op=Add(), right=Name(id='arg_type_str', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='arg_kind', ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR2', ctx=Load())]), body=[Assign(targets=[Name(id='arg_type_str', ctx=Store())], value=BinOp(left=Constant(value='**'), op=Add(), right=Name(id='arg_type_str', ctx=Load())))], orelse=[])]), Assign(targets=[Name(id='arg_label', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='outer_context', ctx=Load()), Name(id='CallExpr', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='outer_context', ctx=Load()), attr='arg_names', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Name(id='n', ctx=Load())])]), body=[Assign(targets=[Name(id='arg_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='outer_context', ctx=Load()), attr='arg_names', ctx=Load()), slice=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='arg_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='arg_label', ctx=Store())], value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='arg_name', ctx=Load()), conversion=-1), Constant(value='"')]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='arg_kind', ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR2', ctx=Load())]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Name(id='TypedDictType', ctx=Load())], keywords=[]), Compare(left=Name(id='m', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load()), slice=BinOp(left=Name(id='m', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=BinOp(left=Name(id='m', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='ARG_STAR2', ctx=Load())])]), body=[Assign(targets=[Name(id='arg_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load()), slice=BinOp(left=Name(id='m', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assert(test=Compare(left=Name(id='arg_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='arg_type_str', ctx=Store()), Name(id='expected_type_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='items', ctx=Load()), slice=Name(id='arg_name', ctx=Load()), ctx=Load()), Name(id='expected_type', ctx=Load())], keywords=[keyword(arg='bare', value=Constant(value=True)), keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Assign(targets=[Name(id='arg_label', ctx=Store())], value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='arg_name', ctx=Load()), conversion=-1), Constant(value='"')]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='outer_context', ctx=Load()), Name(id='IndexExpr', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='outer_context', ctx=Load()), attr='index', ctx=Load()), Name(id='StrExpr', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Value of "{}" has incompatible type {}; expected {}'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='outer_context', ctx=Load()), attr='index', ctx=Load()), attr='value', ctx=Load()), Call(func=Name(id='quote_type_string', ctx=Load()), args=[Name(id='arg_type_str', ctx=Load())], keywords=[]), Call(func=Name(id='quote_type_string', ctx=Load()), args=[Name(id='expected_type_str', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Argument {} {}has incompatible type {}; expected {}'), attr='format', ctx=Load()), args=[Name(id='arg_label', ctx=Load()), Name(id='target', ctx=Load()), Call(func=Name(id='quote_type_string', ctx=Load()), args=[Name(id='arg_type_str', ctx=Load())], keywords=[]), Call(func=Name(id='quote_type_string', ctx=Load()), args=[Name(id='expected_type_str', ctx=Load())], keywords=[])], keywords=[]))]), Assign(targets=[Name(id='expected_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='expected_type', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected_type', ctx=Load()), Name(id='UnionType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='expected_types', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='expected_type', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='expected_types', ctx=Store())], value=List(elts=[Name(id='expected_type', ctx=Load())], ctx=Load()))]), For(target=Name(id='type', ctx=Store()), iter=Call(func=Name(id='get_proper_types', ctx=Load()), args=[Name(id='expected_types', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='notes', ctx=Store())], value=Call(func=Name(id='append_invariance_notes', ctx=Load()), args=[Name(id='notes', ctx=Load()), Name(id='arg_type', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='notes', ctx=Store())], value=Call(func=Name(id='append_numbers_notes', ctx=Load()), args=[Name(id='notes', ctx=Load()), Name(id='arg_type', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Assign(targets=[Name(id='object_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='object_type', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='object_type', ctx=Load()), Name(id='TypedDictType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))], orelse=[Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='ARG_TYPE', ctx=Load()))])])])])])])])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Name(id='notes', ctx=Load()), body=[For(target=Name(id='note_msg', ctx=Store()), iter=Name(id='notes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='note_msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='code', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)), type_params=[]), FunctionDef(name='incompatible_argument_note', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='original_caller_type', annotation=Name(id='ProperType', ctx=Load())), arg(arg='callee_type', annotation=Name(id='ProperType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Tuple(elts=[Name(id='Instance', ctx=Load()), Name(id='TupleType', ctx=Load()), Name(id='TypedDictType', ctx=Load()), Name(id='TypeType', ctx=Load()), Name(id='CallableType', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callee_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='callee_type', ctx=Load()), attr='type', ctx=Load()), attr='is_protocol', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report_protocol_problems', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='callee_type', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callee_type', ctx=Load()), Name(id='UnionType', ctx=Load())], keywords=[]), body=[For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='callee_type', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='type', ctx=Load()), attr='is_protocol', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report_protocol_problems', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='item', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callee_type', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Name(id='find_member', ctx=Load()), args=[Constant(value='__call__'), Name(id='original_caller_type', ctx=Load()), Name(id='original_caller_type', ctx=Load())], keywords=[keyword(arg='is_operator', value=Constant(value=True))])), If(test=Name(id='call', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note_call', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='call', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='maybe_note_concatenate_pos_args', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='callee_type', ctx=Load()), Name(id='context', ctx=Load()), Name(id='code', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='maybe_note_concatenate_pos_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='original_caller_type', annotation=Name(id='ProperType', ctx=Load())), arg(arg='callee_type', annotation=Name(id='ProperType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callee_type', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original_caller_type', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), BoolOp(op=Or(), values=[Attribute(value=Name(id='original_caller_type', ctx=Load()), attr='from_concatenate', ctx=Load()), Attribute(value=Name(id='callee_type', ctx=Load()), attr='from_concatenate', ctx=Load())])]), body=[AnnAssign(target=Name(id='names', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='o', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='callee_type', ctx=Load()), attr='formal_arguments', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='original_caller_type', ctx=Load()), attr='formal_arguments', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Constant(value=None), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='c', ctx=Load()), attr='pos', ctx=Load()), Attribute(value=Name(id='o', ctx=Load()), attr='pos', ctx=Load())], ctx=Load())]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load())]), Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='missing_arguments', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='"'), op=Add(), right=Call(func=Attribute(value=Constant(value='", "'), attr='join', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='"'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='This is likely because "'), FormattedValue(value=Attribute(value=Name(id='original_caller_type', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='" has named arguments: '), FormattedValue(value=Name(id='missing_arguments', ctx=Load()), conversion=-1), Constant(value='. Consider marking them positional-only')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='invalid_index_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index_type', annotation=Name(id='Type', ctx=Load())), arg(arg='expected_type', annotation=Name(id='Type', ctx=Load())), arg(arg='base_str', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=Name(id='ErrorCode', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='index_str', ctx=Store()), Name(id='expected_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='index_type', ctx=Load()), Name(id='expected_type', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Invalid index type {} for {}; expected type {}'), attr='format', ctx=Load()), args=[Name(id='index_str', ctx=Load()), Name(id='base_str', ctx=Load()), Name(id='expected_str', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_few_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='argument_names', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Too few arguments'))], orelse=[If(test=Compare(left=Name(id='argument_names', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='num_positional_args', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='k', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='argument_names', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='arguments_left', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load()), slice=Slice(lower=Name(id='num_positional_args', ctx=Load()), upper=Attribute(value=Name(id='callee', ctx=Load()), attr='min_args', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='diff', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='arguments_left', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='argument_names', ctx=Load())])], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Missing positional argument'))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Missing positional arguments'))]), Assign(targets=[Name(id='callee_name', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='callee_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Name(id='diff', ctx=Load()), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='d', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='diff', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Constant(value='", "'), attr='join', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='diff', ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' "'), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1), Constant(value='" in call to '), FormattedValue(value=Name(id='callee_name', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Too few arguments'), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])))])], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Too few arguments'), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_ARG', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='missing_named_argument', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=JoinedStr(values=[Constant(value='Missing named argument "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_ARG', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_many_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Too many arguments'))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Too many arguments'), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_ARG', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='maybe_note_about_special_args', ctx=Load()), args=[Name(id='callee', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_many_arguments_from_typed_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='arg_type', annotation=Name(id='TypedDictType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='arg_type', ctx=Load()), attr='items', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=JoinedStr(values=[Constant(value='Extra argument "'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='" from **args')]), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]))), Break()], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='too_many_arguments', ctx=Load()), args=[Name(id='callee', ctx=Load()), Name(id='context', ctx=Load())], keywords=[])), Return()]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_many_positional_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Too many positional arguments'))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Too many positional arguments'), op=Add(), right=Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='maybe_note_about_special_args', ctx=Load()), args=[Name(id='callee', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='maybe_note_about_special_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_simple_messages', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='first_arg', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='callee', ctx=Load()), attr='def_extras', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='first_arg')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='first_arg', ctx=Load()), Compare(left=Name(id='first_arg', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='self'), Constant(value='cls'), Constant(value='mcs')])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Looks like the first special argument in a method is not named "self", "cls", or "mcs", maybe it is missing?'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unexpected_keyword_argument_for_function', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='for_func', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='matches', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=JoinedStr(values=[Constant(value='Unexpected keyword argument "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), op=Add(), right=Name(id='for_func', ctx=Load()))), If(test=Name(id='matches', ctx=Load()), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='; did you mean '), FormattedValue(value=Call(func=Name(id='pretty_seq', ctx=Load()), args=[Name(id='matches', ctx=Load()), Constant(value='or')], keywords=[]), conversion=-1), Constant(value='?')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_ARG', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unexpected_keyword_argument', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='arg_type', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='matching_type_args', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='not_matching_type_args', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='kwarg_type', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='callee', ctx=Load()), attr='arg_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='callee_arg_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='callee_arg_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='ARG_STAR', ctx=Load())])]), body=[If(test=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='arg_type', ctx=Load()), Name(id='kwarg_type', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='matching_type_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='callee_arg_name', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='not_matching_type_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='callee_arg_name', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[]), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='best_matches', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='matching_type_args', ctx=Load())], keywords=[keyword(arg='n', value=Constant(value=3))])), If(test=UnaryOp(op=Not(), operand=Name(id='matches', ctx=Load())), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='best_matches', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='not_matching_type_args', ctx=Load())], keywords=[keyword(arg='n', value=Constant(value=3))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unexpected_keyword_argument_for_function', ctx=Load()), args=[Call(func=Name(id='for_function', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]), Name(id='name', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='matches', value=Name(id='matches', ctx=Load()))])), Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Name(id='find_defining_module', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='modules', ctx=Load()), Name(id='callee', ctx=Load())], keywords=[])), If(test=Name(id='module', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='callee', ctx=Load()), attr='definition', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='fname', ctx=Load())), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=Constant(value='Called function'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='fname', ctx=Load()), conversion=-1), Constant(value=' defined here')]), Attribute(value=Name(id='callee', ctx=Load()), attr='definition', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='module', ctx=Load()), attr='path', ctx=Load())), keyword(arg='origin', value=Name(id='context', ctx=Load())), keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_ARG', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='duplicate_argument_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} gets multiple values for keyword argument "{}"'), attr='format', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]), Constant(value='Function')]), Subscript(value=Attribute(value=Name(id='callee', ctx=Load()), attr='arg_names', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='does_not_return_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee_type', annotation=BinOp(left=Name(id='Type', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Report an error about use of an unusable type.')), Assign(targets=[Name(id='callee_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='callee_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='callee_name', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callee_type', ctx=Load()), Name(id='FunctionLike', ctx=Load())], keywords=[]), body=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee_type', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='callee_name', ctx=Load()), Constant(value='Function')])), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' does not return a value (it only ever returns None)')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='FUNC_RETURNS_VALUE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='deleted_as_rvalue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='DeletedType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Report an error about using an deleted type as an rvalue.')), If(test=Compare(left=Attribute(value=Name(id='typ', ctx=Load()), attr='source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value=' "'), FormattedValue(value=Attribute(value=Name(id='typ', ctx=Load()), attr='source', ctx=Load()), conversion=-1), Constant(value='"')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Trying to read deleted variable'), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='deleted_as_lvalue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='DeletedType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Report an error about using an deleted type as an lvalue.\n\n        Currently, this only occurs when trying to assign to an\n        exception variable outside the local except: blocks.\n        ')), If(test=Compare(left=Attribute(value=Name(id='typ', ctx=Load()), attr='source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value=' "'), FormattedValue(value=Attribute(value=Name(id='typ', ctx=Load()), attr='source', ctx=Load()), conversion=-1), Constant(value='"')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Assignment to variable'), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value=' outside except: block')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='no_variant_matches_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='overload', annotation=Name(id='Overloaded', ctx=Load())), arg(arg='arg_types', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='code', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='CALL_OVERLOAD', ctx=Load())])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='overload', ctx=Load())], keywords=[])), If(test=Name(id='name', ctx=Load()), body=[Assign(targets=[Name(id='name_str', ctx=Store())], value=JoinedStr(values=[Constant(value=' of '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='name_str', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='arg_types_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='arg_types', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='num_args', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arg_types', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='num_args', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='All overload variants'), FormattedValue(value=Name(id='name_str', ctx=Load()), conversion=-1), Constant(value=' require at least one argument')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='num_args', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='No overload variant'), FormattedValue(value=Name(id='name_str', ctx=Load()), conversion=-1), Constant(value=' matches argument type '), FormattedValue(value=Name(id='arg_types_str', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='No overload variant'), FormattedValue(value=Name(id='name_str', ctx=Load()), conversion=-1), Constant(value=' matches argument types '), FormattedValue(value=Name(id='arg_types_str', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Possible overload variant'), FormattedValue(value=Call(func=Name(id='plural_s', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='overload', ctx=Load()), attr='items', ctx=Load())], keywords=[])], keywords=[]), conversion=-1), Constant(value=':')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='overload', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Name(id='pretty_callable', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Constant(value=4)), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='wrong_number_values_to_unpack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='provided', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='provided', ctx=Load()), ops=[Lt()], comparators=[Name(id='expected', ctx=Load())]), body=[If(test=Compare(left=Name(id='provided', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Need more than 1 value to unpack ('), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1), Constant(value=' expected)')]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Need more than '), FormattedValue(value=Name(id='provided', ctx=Load()), conversion=-1), Constant(value=' values to unpack ('), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1), Constant(value=' expected)')]), Name(id='context', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='provided', ctx=Load()), ops=[Gt()], comparators=[Name(id='expected', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Too many values to unpack ('), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1), Constant(value=' expected, '), FormattedValue(value=Name(id='provided', ctx=Load()), conversion=-1), Constant(value=' provided)')]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unpacking_strings_disallowed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Unpacking a string is disallowed'), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='type_not_iterable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' object is not iterable')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='possible_missing_await', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Maybe you forgot to use "await"?'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incompatible_operator_assignment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Result type of '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' incompatible in assignment')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overload_signature_incompatible_with_supertype', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='name_in_super', annotation=Name(id='str', ctx=Load())), arg(arg='supertype', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='override_target', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name_in_super', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Signature of "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" incompatible with '), FormattedValue(value=Name(id='target', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load()))])), Assign(targets=[Name(id='note_template', ctx=Store())], value=Constant(value='Overload variants must be defined in the same order as they are in "{}"')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Name(id='note_template', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='supertype', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='signature_incompatible_with_supertype', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='name_in_super', annotation=Name(id='str', ctx=Load())), arg(arg='supertype', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='original', annotation=Name(id='ProperType', ctx=Load())), arg(arg='override', annotation=Name(id='ProperType', ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='override_target', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name_in_super', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Signature of "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" incompatible with '), FormattedValue(value=Name(id='target', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='original_str', ctx=Store()), Name(id='override_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='original', ctx=Load()), Name(id='override', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())), keyword(arg='bare', value=Constant(value=True))])), Assign(targets=[Name(id='INCLUDE_DECORATOR', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='ALLOW_DUPS', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='ALIGN_OFFSET', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='OFFSET', ctx=Store())], value=Constant(value=4)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Superclass:'), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=Name(id='OFFSET', ctx=Load()))), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_callable_or_overload', ctx=Load()), args=[Name(id='original', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load())))), keyword(arg='add_class_or_static_decorator', value=Name(id='INCLUDE_DECORATOR', ctx=Load())), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='original_str', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load())))), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Subclass:'), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=Name(id='OFFSET', ctx=Load()))), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='override', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_callable_or_overload', ctx=Load()), args=[Name(id='override', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load())))), keyword(arg='add_class_or_static_decorator', value=Name(id='INCLUDE_DECORATOR', ctx=Load())), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='override_str', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Name(id='ALIGN_OFFSET', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load())))), keyword(arg='allow_dups', value=Name(id='ALLOW_DUPS', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='pretty_callable_or_overload', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tp', annotation=BinOp(left=Name(id='CallableType', ctx=Load()), op=BitOr(), right=Name(id='Overloaded', ctx=Load()))), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='add_class_or_static_decorator', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=0), Constant(value=False), Constant(value=False), Constant(value=None)], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tp', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), body=[If(test=Name(id='add_class_or_static_decorator', ctx=Load()), body=[Assign(targets=[Name(id='decorator', ctx=Store())], value=Call(func=Name(id='pretty_class_or_static_decorator', ctx=Load()), args=[Name(id='tp', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='decorator', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='decorator', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Name(id='pretty_callable', ctx=Load()), args=[Name(id='tp', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tp', ctx=Load()), Name(id='Overloaded', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_overload', ctx=Load()), args=[Name(id='tp', ctx=Load()), Name(id='context', ctx=Load()), Name(id='offset', ctx=Load())], keywords=[keyword(arg='add_class_or_static_decorator', value=Name(id='add_class_or_static_decorator', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='argument_incompatible_with_supertype', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg_num', annotation=Name(id='int', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='type_name', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='name_in_supertype', annotation=Name(id='str', ctx=Load())), arg(arg='arg_type_in_supertype', annotation=Name(id='Type', ctx=Load())), arg(arg='supertype', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='secondary_context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='override_target', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name_in_supertype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='arg_type_in_supertype_f', ctx=Store())], value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='arg_type_in_supertype', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Argument {} of "{}" is incompatible with {}; supertype defines the argument type as "{}"'), attr='format', ctx=Load()), args=[Name(id='arg_num', ctx=Load()), Name(id='name', ctx=Load()), Name(id='target', ctx=Load()), Name(id='arg_type_in_supertype_f', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__post_init__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='This violates the Liskov substitution principle'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__eq__')]), Name(id='type_name', ctx=Load())]), body=[Assign(targets=[Name(id='multiline_msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='comparison_method_example_msg', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Name(id='type_name', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note_multiline', ctx=Load()), args=[Name(id='multiline_msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load())), keyword(arg='secondary_context', value=Name(id='secondary_context', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='comparison_method_example_msg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='class_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dedent', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='        It is recommended for "__eq__" to work with arbitrary objects, for example:\n            def __eq__(self, other: object) -> bool:\n                if not isinstance(other, {class_name}):\n                    return NotImplemented\n                return <logic to compare two {class_name} instances>\n        '), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Name(id='class_name', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='return_type_incompatible_with_supertype', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='name_in_supertype', annotation=Name(id='str', ctx=Load())), arg(arg='supertype', annotation=Name(id='str', ctx=Load())), arg(arg='original', annotation=Name(id='Type', ctx=Load())), arg(arg='override', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='override_target', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name_in_supertype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='override_str', ctx=Store()), Name(id='original_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='override', ctx=Load()), Name(id='original', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Return type {} of "{}" incompatible with return type {} in {}'), attr='format', ctx=Load()), args=[Name(id='override_str', ctx=Load()), Name(id='name', ctx=Load()), Name(id='original_str', ctx=Load()), Name(id='target', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERRIDE', ctx=Load()))])), Assign(targets=[Name(id='original', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='original', ctx=Load())], keywords=[])), Assign(targets=[Name(id='override', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='override', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='original', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='override', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='override', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='typing.AsyncIterator')]), Compare(left=Attribute(value=Attribute(value=Name(id='original', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='typing.Coroutine')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='original', ctx=Load()), attr='args', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), Compare(left=Subscript(value=Attribute(value=Name(id='original', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Name(id='override', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Consider declaring "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" in '), FormattedValue(value=Name(id='target', ctx=Load()), conversion=-1), Constant(value=' without "async"')]), Name(id='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='See https://mypy.readthedocs.io/en/stable/more_types.html#asynchronous-iterators'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='override_target', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='name_in_super', annotation=Name(id='str', ctx=Load())), arg(arg='supertype', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=JoinedStr(values=[Constant(value='supertype "'), FormattedValue(value=Name(id='supertype', ctx=Load()), conversion=-1), Constant(value='"')])), If(test=Compare(left=Name(id='name_in_super', ctx=Load()), ops=[NotEq()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name_in_super', ctx=Load()), conversion=-1), Constant(value='" of '), FormattedValue(value=Name(id='target', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Name(id='target', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='incompatible_type_application', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expected_arg_count', annotation=Name(id='int', ctx=Load())), arg(arg='actual_arg_count', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='expected_arg_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Type application targets a non-generic function or class'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='actual_arg_count', ctx=Load()), ops=[Gt()], comparators=[Name(id='expected_arg_count', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Type application has too many types ('), FormattedValue(value=Name(id='expected_arg_count', ctx=Load()), conversion=-1), Constant(value=' expected)')]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Type application has too few types ('), FormattedValue(value=Name(id='expected_arg_count', ctx=Load()), conversion=-1), Constant(value=' expected)')]), Name(id='context', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='could_not_infer_type_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee_type', annotation=Name(id='CallableType', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='callee_name', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee_type', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='callee_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot infer type argument '), FormattedValue(value=Name(id='n', ctx=Load()), conversion=-1), Constant(value=' of '), FormattedValue(value=Name(id='callee_name', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='callee_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<dict>')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Try assigning the literal to a variable annotated as dict[<key>, <val>]'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Cannot infer function type argument'), Name(id='context', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='invalid_var_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='List or tuple expected as variadic arguments'), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='invalid_keyword_var_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='is_mapping', annotation=Name(id='bool', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='typ', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Name(id='is_mapping', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Keywords must be strings'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Argument after ** must be a mapping, not '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ARG_TYPE', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='undefined_in_superclass', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='member', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='member', ctx=Load()), conversion=-1), Constant(value='" undefined in superclass')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='variable_may_be_undefined', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Name "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" may be undefined')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='POSSIBLY_UNDEFINED', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='var_used_before_def', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Name "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" is used before definition')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='USED_BEFORE_DEF', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='first_argument_for_super_must_be_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='actual', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='actual', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='type_str', ctx=Store())], value=Constant(value='a non-type instance'))], orelse=[Assign(targets=[Name(id='type_str', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='actual', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Argument 1 for "super" must be a type object; got '), FormattedValue(value=Name(id='type_str', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ARG_TYPE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unsafe_super', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method', annotation=Name(id='str', ctx=Load())), arg(arg='cls', annotation=Name(id='str', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Call to abstract method "{}" of "{}" with trivial body via super() is unsafe'), attr='format', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='SAFE_SUPER', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_few_string_formatting_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Not enough arguments for format string'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='too_many_string_formatting_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Not all arguments converted during string formatting'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unsupported_placeholder', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='placeholder', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported format character "'), FormattedValue(value=Name(id='placeholder', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='string_interpolation_with_star_and_key', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='String interpolation contains both stars and mapping keys'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='requires_int_or_single_byte', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='format_call', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}c" requires an integer in range(256) or a single byte'), attr='format', ctx=Load()), args=[IfExp(test=Name(id='format_call', ctx=Load()), body=Constant(value=':'), orelse=Constant(value='%'))], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='requires_int_or_char', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='format_call', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}c" requires int or char'), attr='format', ctx=Load()), args=[IfExp(test=Name(id='format_call', ctx=Load()), body=Constant(value=':'), orelse=Constant(value='%'))], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='key_not_in_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Key "'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='" not found in mapping')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='string_interpolation_mixing_key_and_non_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='String interpolation mixes specifier with and without mapping keys'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='STRING_FORMATTING', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cannot_determine_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot determine type of "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='HAS_TYPE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cannot_determine_type_in_base', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='base', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot determine type of "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" in base class "'), FormattedValue(value=Name(id='base', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='no_formal_self', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='item', annotation=Name(id='CallableType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Attribute function "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" with type '), FormattedValue(value=Name(id='type', ctx=Load()), conversion=-1), Constant(value=' does not accept self argument')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incompatible_self_argument', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='arg', annotation=Name(id='Type', ctx=Load())), arg(arg='sig', annotation=Name(id='CallableType', ctx=Load())), arg(arg='is_classmethod', annotation=Name(id='bool', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=IfExp(test=Name(id='is_classmethod', ctx=Load()), body=Constant(value='class attribute function'), orelse=Constant(value='attribute function'))), Assign(targets=[Name(id='arg_type', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sig_type', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='sig', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid self argument '), FormattedValue(value=Name(id='arg_type', ctx=Load()), conversion=-1), Constant(value=' to '), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1), Constant(value=' "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" with type '), FormattedValue(value=Name(id='sig_type', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incompatible_conditional_function_def', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='defn', annotation=Name(id='FuncDef', ctx=Load())), arg(arg='old_type', annotation=Name(id='FunctionLike', ctx=Load())), arg(arg='new_type', annotation=Name(id='FunctionLike', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='All conditional function variants must have identical signatures'), Name(id='defn', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='old_type', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_type', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Original:'), Name(id='defn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_callable_or_overload', ctx=Load()), args=[Name(id='old_type', ctx=Load()), Name(id='defn', ctx=Load())], keywords=[keyword(arg='offset', value=Constant(value=4))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Redefinition:'), Name(id='defn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_callable_or_overload', ctx=Load()), args=[Name(id='new_type', ctx=Load()), Name(id='defn', ctx=Load())], keywords=[keyword(arg='offset', value=Constant(value=4))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cannot_instantiate_abstract_class', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='class_name', annotation=Name(id='str', ctx=Load())), arg(arg='abstract_attributes', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='format_string_list', ctx=Load()), args=[ListComp(elt=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='a', ctx=Load()), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='abstract_attributes', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot instantiate abstract class "'), FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='" with abstract attribute'), FormattedValue(value=Call(func=Name(id='plural_s', ctx=Load()), args=[Name(id='abstract_attributes', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='attrs', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ABSTRACT', ctx=Load()))])), Assign(targets=[Name(id='attrs_with_none', ctx=Store())], value=ListComp(elt=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='a', ctx=Load()), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='implicit_and_can_return_none', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='abstract_attributes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Name(id='implicit_and_can_return_none', ctx=Load())], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='attrs_with_none', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='attrs_with_none', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='note', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='attrs_with_none', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=' is implicitly abstract because it has an empty function body. If it is not meant to be abstract, explicitly `return` or `return None`.')]))], orelse=[Assign(targets=[Name(id='note', ctx=Store())], value=JoinedStr(values=[Constant(value='The following methods were marked implicitly abstract because they have empty function bodies: '), FormattedValue(value=Call(func=Name(id='format_string_list', ctx=Load()), args=[Name(id='attrs_with_none', ctx=Load())], keywords=[]), conversion=-1), Constant(value='. If they are not meant to be abstract, explicitly `return` or `return None`.')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='note', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ABSTRACT', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='base_class_definitions_incompatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='base1', annotation=Name(id='TypeInfo', ctx=Load())), arg(arg='base2', annotation=Name(id='TypeInfo', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Definition of "{}" in base class "{}" is incompatible with definition in base class "{}"'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Attribute(value=Name(id='base1', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='base2', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cant_assign_to_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Attribute(value=Name(id='message_registry', ctx=Load()), attr='CANNOT_ASSIGN_TO_METHOD', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='METHOD_ASSIGN', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cant_assign_to_classvar', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot assign to class variable "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" via instance')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='no_overridable_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Method "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" is marked as an override, but no base method was found with this name')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='explicit_override_decorator_missing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='base_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Method "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" is not using @override but is overriding a method in class "'), FormattedValue(value=Name(id='base_name', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='EXPLICIT_OVERRIDE_REQUIRED', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='final_cant_override_writable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot override writable attribute "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" with a final one')]), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cant_override_final', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='base_name', annotation=Name(id='str', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Cannot override final attribute "{}" (previously declared in base class "{}")'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='base_name', ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cant_assign_to_final', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='attr_assign', annotation=Name(id='bool', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Warn about a prohibited assignment to a final attribute.\n\n        Pass `attr_assign=True` if the assignment assigns to an attribute.\n        ')), Assign(targets=[Name(id='kind', ctx=Store())], value=IfExp(test=Name(id='attr_assign', ctx=Load()), body=Constant(value='attribute'), orelse=Constant(value='name'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot assign to final '), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1), Constant(value=' "'), FormattedValue(value=Call(func=Name(id='unmangle', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"')]), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='protocol_members_cant_be_final', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Protocol member cannot be final'), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='final_without_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Final name must be initialized with a value'), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='read_only_property', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='type', annotation=Name(id='TypeInfo', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Property "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" defined in "'), FormattedValue(value=Attribute(value=Name(id='type', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='" is read-only')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incompatible_typevar_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callee', annotation=Name(id='CallableType', ctx=Load())), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='typevar_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='message_registry', ctx=Load()), attr='INCOMPATIBLE_TYPEVAR_VALUE', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='typevar_name', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[]), Constant(value='function')]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPE_VAR', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='dangerous_comparison', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left', annotation=Name(id='Type', ctx=Load())), arg(arg='right', annotation=Name(id='Type', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='left_str', ctx=Store())], value=IfExp(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Eq()], comparators=[Constant(value='container')]), body=Constant(value='element'), orelse=Constant(value='left operand'))), Assign(targets=[Name(id='right_str', ctx=Store())], value=IfExp(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Eq()], comparators=[Constant(value='container')]), body=Constant(value='container item'), orelse=Constant(value='right operand'))), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Non-overlapping {} check ({} type: {}, {} type: {})')), Assign(targets=[Tuple(elts=[Name(id='left_typ', ctx=Store()), Name(id='right_typ', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='kind', ctx=Load()), Name(id='left_str', ctx=Load()), Name(id='left_typ', ctx=Load()), Name(id='right_str', ctx=Load()), Name(id='right_typ', ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='COMPARISON_OVERLAP', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overload_inconsistently_applies_decorator', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='decorator', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=JoinedStr(values=[Constant(value='Overload does not consistently use the "@'), FormattedValue(value=Name(id='decorator', ctx=Load()), conversion=-1), Constant(value='" ')]), op=Add(), right=Constant(value='decorator on all function signatures.')), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overloaded_signatures_overlap', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index1', annotation=Name(id='int', ctx=Load())), arg(arg='index2', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Overloaded function signatures {} and {} overlap with incompatible return types'), attr='format', ctx=Load()), args=[Name(id='index1', ctx=Load()), Name(id='index2', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OVERLOAD_OVERLAP', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overloaded_signature_will_never_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index1', annotation=Name(id='int', ctx=Load())), arg(arg='index2', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Overloaded function signature {index2} will never be matched: signature {index1}'s parameter type(s) are the same or broader"), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='index1', value=Name(id='index1', ctx=Load())), keyword(arg='index2', value=Name(id='index2', ctx=Load()))]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overloaded_signatures_typevar_specific', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=JoinedStr(values=[Constant(value='Overloaded function implementation cannot satisfy signature '), FormattedValue(value=Name(id='index', ctx=Load()), conversion=-1), Constant(value=' ')]), op=Add(), right=Constant(value='due to inconsistencies in how they use type variables')), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overloaded_signatures_arg_specific', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Overloaded function implementation does not accept all possible arguments of signature {}'), attr='format', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='overloaded_signatures_ret_specific', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Overloaded function implementation cannot produce return type of signature {}'), attr='format', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='warn_both_operands_are_from_unions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Both left and right operands are unions'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='warn_operand_was_from_union', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='side', annotation=Name(id='str', ctx=Load())), arg(arg='original', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='side', ctx=Load()), conversion=-1), Constant(value=' operand is of type '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='original', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='OPERATOR', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='operator_method_signatures_overlap', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse_class', annotation=Name(id='TypeInfo', ctx=Load())), arg(arg='reverse_method', annotation=Name(id='str', ctx=Load())), arg(arg='forward_class', annotation=Name(id='Type', ctx=Load())), arg(arg='forward_method', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Signatures of "{}" of "{}" and "{}" of {} are unsafely overlapping'), attr='format', ctx=Load()), args=[Name(id='reverse_method', ctx=Load()), Attribute(value=Name(id='reverse_class', ctx=Load()), attr='name', ctx=Load()), Name(id='forward_method', ctx=Load()), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='forward_class', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='forward_operator_not_callable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='forward_method', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Forward operator "'), FormattedValue(value=Name(id='forward_method', ctx=Load()), conversion=-1), Constant(value='" is not callable')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='signatures_incompatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method', annotation=Name(id='str', ctx=Load())), arg(arg='other_method', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Signatures of "'), FormattedValue(value=Name(id='method', ctx=Load()), conversion=-1), Constant(value='" and "'), FormattedValue(value=Name(id='other_method', ctx=Load()), conversion=-1), Constant(value='" are incompatible')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='yield_from_invalid_operand_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='expr', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value='object')]), body=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='expr', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), orelse=Name(id='expr', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='"yield from" can\'t be applied to '), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='AnyType', ctx=Load()), args=[Attribute(value=Name(id='TypeOfAny', ctx=Load()), attr='from_error', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Type', ctx=Load()), type_params=[]), FunctionDef(name='invalid_signature', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func_type', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid signature '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='func_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='invalid_signature_for_special_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func_type', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='method_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid signature '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='func_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' for "'), FormattedValue(value=Name(id='method_name', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='reveal_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='visitor', ctx=Store())], value=Call(func=Name(id='TypeStrVisitor', ctx=Load()), args=[], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Revealed type is "'), FormattedValue(value=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='accept', ctx=Load()), args=[Name(id='visitor', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='reveal_locals', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type_map', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), BinOp(left=Name(id='Type', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sorted_locals', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='type_map', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], keywords=[])), If(test=Name(id='sorted_locals', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Revealed local types are:'), Name(id='context', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='sorted_locals', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='visitor', ctx=Store())], value=Call(func=Name(id='TypeStrVisitor', ctx=Load()), args=[], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='    '), FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=IfExp(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='accept', ctx=Load()), args=[Name(id='visitor', ctx=Load())], keywords=[]), orelse=Constant(value=None)), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='There are no locals to reveal'), Name(id='context', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unsupported_type_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot instantiate type "Type['), FormattedValue(value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']"')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='redundant_cast', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Redundant cast to '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='REDUNDANT_CAST', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='assert_type_fail', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source_type', annotation=Name(id='Type', ctx=Load())), arg(arg='target_type', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='source', ctx=Store()), Name(id='target', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='source_type', ctx=Load()), Name(id='target_type', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expression is of type '), FormattedValue(value=Name(id='source', ctx=Load()), conversion=-1), Constant(value=', not '), FormattedValue(value=Name(id='target', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ASSERT_TYPE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unimported_type_becomes_any', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load())), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1), Constant(value=' becomes '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' due to an unfollowed import')]), Name(id='ctx', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='NO_ANY_UNIMPORTED', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='need_annotation_for_var', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Name(id='SymbolNode', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='python_version', annotation=BinOp(left=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='hint', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='pep604_supported', ctx=Store())], value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='python_version', ctx=Load())), Compare(left=Name(id='python_version', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())])])), Assign(targets=[Name(id='recommended_type', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Name(id='python_version', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Var', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='type', ctx=Load()), Name(id='PartialType', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='type_dec', ctx=Store())], value=Constant(value='<type>')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='type', ctx=Load()), attr='type', ctx=Load())), body=[If(test=Name(id='pep604_supported', ctx=Load()), body=[Assign(targets=[Name(id='recommended_type', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='type_dec', ctx=Load()), conversion=-1), Constant(value=' | None')]))], orelse=[Assign(targets=[Name(id='recommended_type', ctx=Store())], value=JoinedStr(values=[Constant(value='Optional['), FormattedValue(value=Name(id='type_dec', ctx=Load()), conversion=-1), Constant(value=']')]))])], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[In()], comparators=[Name(id='reverse_builtin_aliases', ctx=Load())]), body=[Assign(targets=[Name(id='alias', ctx=Store())], value=Subscript(value=Name(id='reverse_builtin_aliases', ctx=Load()), slice=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='alias', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='alias', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='alias', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Dict')]), body=[Assign(targets=[Name(id='type_dec', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='type_dec', ctx=Load()), conversion=-1), Constant(value=', '), FormattedValue(value=Name(id='type_dec', ctx=Load()), conversion=-1)]))], orelse=[]), Assign(targets=[Name(id='recommended_type', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='alias', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Name(id='type_dec', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[])])], orelse=[]), If(test=Compare(left=Name(id='recommended_type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='hint', ctx=Store())], value=JoinedStr(values=[Constant(value=' (hint: "'), FormattedValue(value=Attribute(value=Name(id='node', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='recommended_type', ctx=Load()), conversion=-1), Constant(value=' = ...")')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Need type annotation for "'), FormattedValue(value=Call(func=Name(id='unmangle', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='name', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"'), FormattedValue(value=Name(id='hint', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='VAR_ANNOTATED', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='explicit_any', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Explicit "Any" is not allowed'), Name(id='ctx', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unsupported_target_for_star_typeddict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported type {} for ** expansion in TypedDict'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='non_required_keys_absent_with_star', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='keys', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Non-required {} not explicitly found in any ** item'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_key_list', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[keyword(arg='short', value=Constant(value=True))])], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unexpected_typeddict_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='TypedDictType', ctx=Load())), arg(arg='expected_keys', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='actual_keys', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='actual_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='actual_keys', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='expected_keys', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='is_anonymous', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='missing', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='expected_keys', ctx=Load()), ifs=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='actual_set', ctx=Load())])], is_async=0)])), If(test=Name(id='missing', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Missing {} for TypedDict {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_key_list', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[keyword(arg='short', value=Constant(value=True))]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='extra', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='actual_keys', ctx=Load()), ifs=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='expected_set', ctx=Load())])], is_async=0)])), If(test=Name(id='extra', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Extra {} for TypedDict {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_key_list', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[keyword(arg='short', value=Constant(value=True))]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_UNKNOWN_KEY', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='missing', ctx=Load()), Name(id='extra', ctx=Load())]), body=[Return()], orelse=[])], orelse=[]), Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='format_key_list', ctx=Load()), args=[Name(id='actual_keys', ctx=Load())], keywords=[keyword(arg='short', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Name(id='expected_keys', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected TypedDict '), FormattedValue(value=Name(id='found', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Name(id='format_key_list', ctx=Load()), args=[Name(id='expected_keys', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='actual_keys', ctx=Load()), Compare(left=Name(id='actual_set', ctx=Load()), ops=[Lt()], comparators=[Name(id='expected_set', ctx=Load())])]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=JoinedStr(values=[Constant(value='only '), FormattedValue(value=Name(id='found', ctx=Load()), conversion=-1)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected '), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1), Constant(value=' but found '), FormattedValue(value=Name(id='found', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typeddict_key_must_be_string_literal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='TypedDictType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='TypedDict key must be a string literal; expected one of {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_item_name_list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='LITERAL_REQ', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typeddict_key_not_found', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='TypedDictType', ctx=Load())), arg(arg='item_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='setitem', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Handle error messages for TypedDicts that have unknown keys.\n\n        Note, that we differentiate in between reading a value and setting a\n        value.\n        Setting a value on a TypedDict is an 'unknown-key' error, whereas\n        reading it is the more serious/general 'item' error.\n        ")), If(test=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='is_anonymous', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}" is not a valid TypedDict key; expected one of {}'), attr='format', ctx=Load()), args=[Name(id='item_name', ctx=Load()), Call(func=Name(id='format_item_name_list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='err_code', ctx=Store())], value=IfExp(test=Name(id='setitem', ctx=Load()), body=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_UNKNOWN_KEY', ctx=Load()), orelse=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='TypedDict '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' has no key "'), FormattedValue(value=Name(id='item_name', ctx=Load()), conversion=-1), Constant(value='"')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='err_code', ctx=Load()))])), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='best_matches', ctx=Load()), args=[Name(id='item_name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='n', value=Constant(value=3))])), If(test=Name(id='matches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Did you mean {}?'), attr='format', ctx=Load()), args=[Call(func=Name(id='pretty_seq', ctx=Load()), args=[Name(id='matches', ctx=Load()), Constant(value='or')], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='err_code', ctx=Load()))]))], orelse=[])])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typeddict_context_ambiguous', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='types', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='TypedDictType', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='formatted_types', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Starred(value=Name(id='types', ctx=Load()), ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Type of TypedDict is ambiguous, none of ('), FormattedValue(value=Name(id='formatted_types', ctx=Load()), conversion=-1), Constant(value=') matches cleanly')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typeddict_key_cannot_be_deleted', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='TypedDictType', ctx=Load())), arg(arg='item_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='is_anonymous', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='TypedDict key "'), FormattedValue(value=Name(id='item_name', ctx=Load()), conversion=-1), Constant(value='" cannot be deleted')]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Key "'), FormattedValue(value=Name(id='item_name', ctx=Load()), conversion=-1), Constant(value='" of TypedDict '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' cannot be deleted')]), Name(id='context', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typeddict_setdefault_arguments_inconsistent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default', annotation=Name(id='Type', ctx=Load())), arg(arg='expected', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Argument 2 to "setdefault" of "TypedDict" has incompatible type {}; expected {}')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='default', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='expected', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPEDDICT_ITEM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='type_arguments_not_allowed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Parameterized generics cannot be used with class or instance checks'), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='disallowed_any_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='typ', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='AnyType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Expression has type "Any"'))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='Expression type contains "Any" (has type '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incorrectly_returning_any', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='Returning Any from function declared to return '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='NO_ANY_RETURN', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='incorrect__exit__return', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='"bool" is invalid as return type for "__exit__" that always returns False'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='EXIT_RETURN', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Use "typing_extensions.Literal[False]" as the return type or change it to "None"'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='EXIT_RETURN', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='If return type of "__exit__" implies that it may return True, the context manager may swallow exceptions'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='EXIT_RETURN', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='untyped_decorated_function', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='typ', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='AnyType', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Function is untyped after decorator transformation'), Name(id='context', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Type of decorated function contains type "Any" ('), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]), Name(id='context', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='typed_function_untyped_decorator', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Untyped decorator makes function "'), FormattedValue(value=Name(id='func_name', ctx=Load()), conversion=-1), Constant(value='" untyped')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='bad_proto_variance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual', annotation=Name(id='int', ctx=Load())), arg(arg='tvar_name', annotation=Name(id='str', ctx=Load())), arg(arg='expected', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='capitalize', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} type variable "{}" used in protocol where {} one is expected'), attr='format', ctx=Load()), args=[Call(func=Name(id='variance_string', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]), Name(id='tvar_name', ctx=Load()), Call(func=Name(id='variance_string', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='concrete_only_assign', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Can only assign concrete classes to a variable of type '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPE_ABSTRACT', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='concrete_only_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Only concrete class can be given where '), FormattedValue(value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is expected')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='TYPE_ABSTRACT', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='cannot_use_function_with_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method_name', annotation=Name(id='str', ctx=Load())), arg(arg='type_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot use '), FormattedValue(value=Name(id='method_name', ctx=Load()), conversion=-1), Constant(value='() with '), FormattedValue(value=Name(id='type_name', ctx=Load()), conversion=-1), Constant(value=' type')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='report_non_method_protocol', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tp', annotation=Name(id='TypeInfo', ctx=Load())), arg(arg='members', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value="Only protocols that don't have non-method members can be used with issubclass()"), Name(id='context', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='members', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='members', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Protocol "'), FormattedValue(value=Attribute(value=Name(id='tp', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='" has non-method member(s): '), FormattedValue(value=Name(id='attrs', ctx=Load()), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='note_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subtype', annotation=Name(id='Type', ctx=Load())), arg(arg='call', annotation=Name(id='Type', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[None], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}.__call__" has type {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='call', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='verbosity', value=Constant(value=1))])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unreachable_statement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Statement is unreachable'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNREACHABLE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='redundant_left_operand', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Indicates that the left operand of a boolean expression is redundant:\n        it does not change the truth value of the entire condition as a whole.\n        \'op_name\' should either be the string "and" or the string "or".\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='redundant_expr', ctx=Load()), args=[JoinedStr(values=[Constant(value='Left operand of "'), FormattedValue(value=Name(id='op_name', ctx=Load()), conversion=-1), Constant(value='"')]), Compare(left=Name(id='op_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='and')]), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='unreachable_right_operand', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op_name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Indicates that the right operand of a boolean expression is redundant:\n        it does not change the truth value of the entire condition as a whole.\n        \'op_name\' should either be the string "and" or the string "or".\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Right operand of "'), FormattedValue(value=Name(id='op_name', ctx=Load()), conversion=-1), Constant(value='" is never evaluated')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNREACHABLE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='redundant_condition_in_comprehension', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='truthiness', annotation=Name(id='bool', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='redundant_expr', ctx=Load()), args=[Constant(value='If condition in comprehension'), Name(id='truthiness', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='redundant_condition_in_if', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='truthiness', annotation=Name(id='bool', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='redundant_expr', ctx=Load()), args=[Constant(value='If condition'), Name(id='truthiness', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='redundant_expr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='truthiness', annotation=Name(id='bool', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='description', ctx=Load()), conversion=-1), Constant(value=' is always '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='truthiness', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), conversion=-1)]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='REDUNDANT_EXPR', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='impossible_intersection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='formatted_base_class_list', annotation=Name(id='str', ctx=Load())), arg(arg='reason', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='Subclass of {} cannot exist: {}')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='formatted_base_class_list', ctx=Load()), Name(id='reason', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='UNREACHABLE', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='report_protocol_problems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subtype', annotation=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='Instance', ctx=Load()), op=BitOr(), right=Name(id='TupleType', ctx=Load())), op=BitOr(), right=Name(id='TypedDictType', ctx=Load())), op=BitOr(), right=Name(id='TypeType', ctx=Load())), op=BitOr(), right=Name(id='CallableType', ctx=Load()))), arg(arg='supertype', annotation=Name(id='Instance', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[None], defaults=[]), body=[Expr(value=Constant(value="Report possible protocol conflicts between 'subtype' and 'supertype'.\n\n        This includes missing members, incompatible types, and incompatible\n        attribute flags, such as settable vs read-only or class variable vs\n        instance variable.\n        ")), Assign(targets=[Name(id='OFFSET', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='MAX_ITEMS', ctx=Store())], value=Constant(value=2)), AnnAssign(target=Name(id='exclusions', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Name(id='TypedDictType', ctx=Load()), Name(id='TupleType', ctx=Load())], values=[List(elts=[Constant(value='typing.Mapping')], ctx=Load()), List(elts=[Constant(value='typing.Iterable'), Constant(value='typing.Sequence')], ctx=Load())]), simple=1), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='exclusions', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='subtype', ctx=Load())], keywords=[]), List(elts=[], ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tp', ctx=Load()), Name(id='UninhabitedType', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='tp', ctx=Store()), iter=Call(func=Name(id='get_proper_types', ctx=Load()), args=[Attribute(value=Name(id='supertype', ctx=Load()), attr='args', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='class_obj', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='is_module', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='skip', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='TupleType', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='partial_fallback', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='subtype', ctx=Store())], value=Attribute(value=Name(id='subtype', ctx=Load()), attr='partial_fallback', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='TypedDictType', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='fallback', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='subtype', ctx=Store())], value=Attribute(value=Name(id='subtype', ctx=Load()), attr='fallback', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='TypeType', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='item', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='class_obj', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='subtype', ctx=Store())], value=Attribute(value=Name(id='subtype', ctx=Load()), attr='item', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='subtype', ctx=Load()), attr='is_type_obj', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='ret_type', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='ret_type', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ret_type', ctx=Load()), Name(id='TupleType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret_type', ctx=Store())], value=Attribute(value=Name(id='ret_type', ctx=Load()), attr='partial_fallback', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ret_type', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='class_obj', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='subtype', ctx=Store())], value=Name(id='ret_type', ctx=Load()))], orelse=[Assign(targets=[Name(id='subtype', ctx=Store())], value=Attribute(value=Name(id='subtype', ctx=Load()), attr='fallback', ctx=Load())), Assign(targets=[Name(id='skip', ctx=Store())], value=List(elts=[Constant(value='__call__')], ctx=Load()))])], orelse=[])])])]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='subtype', ctx=Load()), attr='extra_attrs', ctx=Load()), Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='extra_attrs', ctx=Load()), attr='mod_name', ctx=Load())]), body=[Assign(targets=[Name(id='is_module', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='missing', ctx=Store())], value=Call(func=Name(id='get_missing_protocol_members', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[keyword(arg='skip', value=Name(id='skip', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='missing', ctx=Load()), BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='protocol_members', ctx=Load())], keywords=[])]), Compare(left=Name(id='missing', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='__call__')], ctx=Load())])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='MAX_ITEMS', ctx=Load())])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='missing', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='__call__')], ctx=Load())]), Name(id='class_obj', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}" has constructor incompatible with "__call__" of "{}"'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}" is missing following "{}" protocol member{}:'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='plural_s', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[])], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='OFFSET', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))])], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='MAX_ITEMS', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='protocol_members', ctx=Load())], keywords=[])])]), body=[Return()], orelse=[])]), Assign(targets=[Name(id='conflict_types', ctx=Store())], value=Call(func=Name(id='get_conflict_protocol_types', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[keyword(arg='class_obj', value=Name(id='class_obj', ctx=Load())), keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='conflict_types', ctx=Load()), BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Call(func=Name(id='erase_type', ctx=Load()), args=[Name(id='supertype', ctx=Load())], keywords=[])], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))])), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='defn', ctx=Load()), attr='type_vars', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='defn', ctx=Load()), attr='type_vars', ctx=Load())), Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='has_param_spec_type', ctx=Load()), Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='has_param_spec_type', ctx=Load())])]), body=[Assign(targets=[Name(id='type_name', ctx=Store())], value=Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='module_names', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Following member(s) of '), FormattedValue(value=Name(id='type_name', ctx=Load()), conversion=-1), Constant(value=' have conflicts:')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='got', ctx=Store()), Name(id='exp', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='conflict_types', ctx=Load()), slice=Slice(upper=Name(id='MAX_ITEMS', ctx=Load())), ctx=Load()), body=[Assign(targets=[Name(id='exp', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='exp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='got', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='got', ctx=Load()), Tuple(elts=[Name(id='CallableType', ctx=Load()), Name(id='Overloaded', ctx=Load())], ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}: expected {}, got {}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Call(func=Name(id='format_type_distinctly', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='got', ctx=Load())], keywords=[keyword(arg='options', value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()))]), ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='OFFSET', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Expected:'), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='OFFSET', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Name(id='pretty_callable', ctx=Load()), args=[Name(id='exp', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='skip_self', value=BoolOp(op=Or(), values=[Name(id='class_obj', ctx=Load()), Name(id='is_module', ctx=Load())]))]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load()))), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='Overloaded', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_overload', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='context', ctx=Load()), BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load()))], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='skip_self', value=BoolOp(op=Or(), values=[Name(id='class_obj', ctx=Load()), Name(id='is_module', ctx=Load())]))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='Got:'), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='OFFSET', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='got', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Name(id='pretty_callable', ctx=Load()), args=[Name(id='got', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='skip_self', value=BoolOp(op=Or(), values=[Name(id='class_obj', ctx=Load()), Name(id='is_module', ctx=Load())]))]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load()))), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='got', ctx=Load()), Name(id='Overloaded', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pretty_overload', ctx=Load()), args=[Name(id='got', ctx=Load()), Name(id='context', ctx=Load()), BinOp(left=Constant(value=2), op=Mult(), right=Name(id='OFFSET', ctx=Load()))], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='skip_self', value=BoolOp(op=Or(), values=[Name(id='class_obj', ctx=Load()), Name(id='is_module', ctx=Load())]))]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_more', ctx=Load()), args=[Name(id='conflict_types', ctx=Load()), Name(id='context', ctx=Load()), Name(id='OFFSET', ctx=Load()), Name(id='MAX_ITEMS', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='conflict_flags', ctx=Store())], value=Call(func=Name(id='get_bad_protocol_flags', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[keyword(arg='class_obj', value=Name(id='class_obj', ctx=Load()))])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='subflags', ctx=Store()), Name(id='superflags', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='conflict_flags', ctx=Load()), slice=Slice(upper=Name(id='MAX_ITEMS', ctx=Load())), ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='class_obj', ctx=Load())), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='subflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='superflags', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Protocol member {}.{} expected instance variable, got class variable'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='class_obj', ctx=Load())), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Protocol member {}.{} expected class variable, got instance variable'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Protocol member {}.{} expected settable variable, got read-only attribute'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='IS_CLASS_OR_STATIC', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_CLASS_OR_STATIC', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Protocol member {}.{} expected class or static method'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='class_obj', ctx=Load()), Compare(left=Name(id='IS_VAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=Name(id='IS_VAR', ctx=Load()), ops=[In()], comparators=[Name(id='subflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Only class variables allowed for class object access on protocols, {} is an instance variable of "{}"'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='class_obj', ctx=Load()), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='ClassVar protocol member {}.{} can never be matched by a class object'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_more', ctx=Load()), args=[Name(id='conflict_flags', ctx=Load()), Name(id='context', ctx=Load()), Name(id='OFFSET', ctx=Load()), Name(id='MAX_ITEMS', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='pretty_overload', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tp', annotation=Name(id='Overloaded', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='offset', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[arg(arg='add_class_or_static_decorator', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_dups', annotation=Name(id='bool', ctx=Load())), arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='skip_self', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False)], defaults=[]), body=[For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='tp', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='@overload'), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))])), If(test=Name(id='add_class_or_static_decorator', ctx=Load()), body=[Assign(targets=[Name(id='decorator', ctx=Store())], value=Call(func=Name(id='pretty_class_or_static_decorator', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='decorator', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='decorator', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Name(id='pretty_callable', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[keyword(arg='skip_self', value=Name(id='skip_self', ctx=Load()))]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='allow_dups', value=Name(id='allow_dups', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='print_more', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conflicts', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='max_items', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[arg(arg='code', annotation=BinOp(left=Name(id='ErrorCode', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None)], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='conflicts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='max_items', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='<'), FormattedValue(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='conflicts', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='max_items', ctx=Load())), conversion=-1), Constant(value=' more conflict(s) not shown>')]), Name(id='context', ctx=Load())], keywords=[keyword(arg='offset', value=Name(id='offset', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='try_report_long_tuple_assignment_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subtype', annotation=Name(id='ProperType', ctx=Load())), arg(arg='supertype', annotation=Name(id='ProperType', ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='msg', annotation=Attribute(value=Name(id='message_registry', ctx=Load()), attr='ErrorMessage', ctx=Load())), arg(arg='subtype_label', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='supertype_label', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Try to generate meaningful error message for very long tuple assignment\n\n        Returns a bool: True when generating long tuple assignment error,\n        False when no such error reported\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='TupleType', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=10)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='supertype', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.tuple')])]), body=[Assign(targets=[Name(id='lhs_type', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='lhs_types', ctx=Store())], value=BinOp(left=List(elts=[Name(id='lhs_type', ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='generate_incompatible_tuple_error', ctx=Load()), args=[Name(id='lhs_types', ctx=Load()), Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load()), Name(id='context', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='supertype', ctx=Load()), Name(id='TupleType', ctx=Load())], keywords=[]), BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=10)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='supertype', ctx=Load()), attr='items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=10)])])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='supertype', ctx=Load()), attr='items', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='supertype_label', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='subtype_label', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='with_additional_msg', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' ({} {}, {} {})'), attr='format', ctx=Load()), args=[Name(id='subtype_label', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format_long_tuple_type', ctx=Load()), args=[Name(id='subtype', ctx=Load())], keywords=[]), Name(id='supertype_label', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format_long_tuple_type', ctx=Load()), args=[Name(id='supertype', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Attribute(value=Name(id='msg', ctx=Load()), attr='value', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='msg', ctx=Load()), attr='code', ctx=Load()))])), Return(value=Constant(value=True))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='generate_incompatible_tuple_error', ctx=Load()), args=[Attribute(value=Name(id='supertype', ctx=Load()), attr='items', ctx=Load()), Attribute(value=Name(id='subtype', ctx=Load()), attr='items', ctx=Load()), Name(id='context', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[])])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), FunctionDef(name='format_long_tuple_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typ', annotation=Name(id='TupleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format very long tuple type using an ellipsis notation')), Assign(targets=[Name(id='item_cnt', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='item_cnt', ctx=Load()), ops=[Gt()], comparators=[Constant(value=10)]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}[{}, {}, ... <{} more items>]'), attr='format', ctx=Load()), args=[IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()), attr='use_lowercase_names', ctx=Load()), args=[], keywords=[]), body=Constant(value='tuple'), orelse=Constant(value='Tuple')), Call(func=Name(id='format_type_bare', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Call(func=Name(id='format_type_bare', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='item_cnt', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='typ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='generate_incompatible_tuple_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lhs_types', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load())), arg(arg='rhs_types', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='msg', annotation=Attribute(value=Name(id='message_registry', ctx=Load()), attr='ErrorMessage', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate error message for individual incompatible tuple pairs')), Assign(targets=[Name(id='error_cnt', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Name(id='notes', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='lhs_t', ctx=Store()), Name(id='rhs_t', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='lhs_types', ctx=Load()), Name(id='rhs_types', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='lhs_t', ctx=Load()), Name(id='rhs_t', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='error_cnt', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expression tuple item {} has type {}; {} expected; '), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='rhs_t', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]), Call(func=Name(id='format_type', ctx=Load()), args=[Name(id='lhs_t', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='error_cnt', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Name(id='info', ctx=Store())], value=JoinedStr(values=[Constant(value=' ('), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error_cnt', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' tuple items are incompatible')])), If(test=Compare(left=BinOp(left=Name(id='error_cnt', ctx=Load()), op=Sub(), right=Constant(value=3)), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='info', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='; '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='error_cnt', ctx=Load()), op=Sub(), right=Constant(value=3))], keywords=[]), conversion=-1), Constant(value=' items are omitted)')]))], orelse=[AugAssign(target=Name(id='info', ctx=Store()), op=Add(), value=Constant(value=')'))]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='with_additional_msg', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Attribute(value=Name(id='msg', ctx=Load()), attr='value', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='msg', ctx=Load()), attr='code', ctx=Load()))])), For(target=Name(id='note', ctx=Store()), iter=Name(id='notes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Name(id='note', ctx=Load()), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='msg', ctx=Load()), attr='code', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='add_fixture_note', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname', annotation=Name(id='str', ctx=Load())), arg(arg='ctx', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[JoinedStr(values=[Constant(value='Maybe your test fixture does not define "'), FormattedValue(value=Name(id='fullname', ctx=Load()), conversion=-1), Constant(value='"?')]), Name(id='ctx', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fullname', ctx=Load()), ops=[In()], comparators=[Name(id='SUGGESTED_TEST_FIXTURES', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Consider adding [builtins fixtures/{}] to your test description'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='SUGGESTED_TEST_FIXTURES', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='annotation_in_unchecked_function', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='note', ctx=Load()), args=[Constant(value='By default the bodies of untyped functions are not checked, consider using --check-untyped-defs'), Name(id='context', ctx=Load())], keywords=[keyword(arg='code', value=Attribute(value=Name(id='codes', ctx=Load()), attr='ANNOTATION_UNCHECKED', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None), type_params=[])], decorator_list=[], type_params=[]), FunctionDef(name='quote_type_string', args=arguments(posonlyargs=[], args=[arg(arg='type_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Quotes a type representation for use in messages.')), Assign(targets=[Name(id='no_quote_regex', ctx=Store())], value=Constant(value='^<(tuple|union): \\d+ items>$')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='type_string', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='Module'), Constant(value='overloaded function'), Constant(value='Never'), Constant(value='<deleted>')], ctx=Load())]), Call(func=Attribute(value=Name(id='type_string', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Module ')], keywords=[]), Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='no_quote_regex', ctx=Load()), Name(id='type_string', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='type_string', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='?')], keywords=[])]), body=[Return(value=Name(id='type_string', ctx=Load()))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='type_string', ctx=Load()), conversion=-1), Constant(value='"')]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_callable_args', args=arguments(posonlyargs=[], args=[arg(arg='arg_types', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load())), arg(arg='arg_kinds', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='ArgKind', ctx=Load()), ctx=Load())), arg(arg='arg_names', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), ctx=Load())), arg(arg='format', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Type', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format a bunch of Callable arguments into a string')), Assign(targets=[Name(id='arg_strings', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='arg_name', ctx=Store()), Name(id='arg_type', ctx=Store()), Name(id='arg_kind', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='arg_names', ctx=Load()), Name(id='arg_types', ctx=Load()), Name(id='arg_kinds', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='arg_kind', ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_POS', ctx=Load())]), Compare(left=Name(id='arg_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), BoolOp(op=And(), values=[Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Call(func=Attribute(value=Name(id='arg_kind', ctx=Load()), attr='is_positional', ctx=Load()), args=[], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='arg_strings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='format', ctx=Load()), args=[Name(id='arg_type', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Subscript(value=Name(id='ARG_CONSTRUCTOR_NAMES', ctx=Load()), slice=Name(id='arg_kind', ctx=Load()), ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='arg_kind', ctx=Load()), attr='is_star', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='arg_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='arg_strings', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='constructor', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Name(id='arg_type', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='arg_strings', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='constructor', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Name(id='arg_type', ctx=Load())], keywords=[]), conversion=-1), Constant(value=', '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='arg_name', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')])], keywords=[]))])])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='arg_strings', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_type_inner', args=arguments(posonlyargs=[], args=[arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='options', annotation=Name(id='Options', ctx=Load())), arg(arg='fullnames', annotation=BinOp(left=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='module_names', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Convert a type to a relatively short string suitable for error messages.\n\n    Args:\n      verbosity: a coarse grained control on the verbosity of the type\n      fullnames: a set of names that should be printed in full\n    ')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='typ', annotation=Name(id='Type', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='format_type_inner', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='verbosity', ctx=Load()), Name(id='options', ctx=Load()), Name(id='fullnames', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_list', args=arguments(posonlyargs=[], args=[arg(arg='types', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='format', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='typ', ctx=Store()), iter=Name(id='types', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_union', args=arguments(posonlyargs=[], args=[arg(arg='types', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Type', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='formatted', ctx=Store())], value=ListComp(elt=Call(func=Name(id='format', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='typ', ctx=Store()), iter=Name(id='types', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='format', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value='None')])], is_async=0)])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='format', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='None')]), generators=[comprehension(target=Name(id='typ', ctx=Store()), iter=Name(id='types', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='formatted', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='None')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=' | '), attr='join', ctx=Load()), args=[Name(id='formatted', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_literal_value', args=arguments(posonlyargs=[], args=[arg(arg='typ', annotation=Name(id='LiteralType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='is_enum_literal', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='underlying_type', ctx=Store())], value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='fallback', ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='underlying_type', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Name(id='typ', ctx=Load()), attr='value', ctx=Load()), conversion=-1)]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='value_repr', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TypeAliasType', ctx=Load())], keywords=[]), Attribute(value=Name(id='typ', ctx=Load()), attr='is_recursive', ctx=Load())]), body=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='type_str', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='typ', ctx=Load()), attr='alias', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='alias', ctx=Load()), attr='name', ctx=Load()), orelse=Constant(value='<alias (unfixed)>'))), If(test=Attribute(value=Name(id='typ', ctx=Load()), attr='args', ctx=Load()), body=[AugAssign(target=Name(id='type_str', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Call(func=Name(id='format_list', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='args', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[]), Return(value=Name(id='type_str', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='typ', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='itype', ctx=Store())], value=Name(id='typ', ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='types.ModuleType')]), body=[Assign(targets=[Name(id='base_str', ctx=Store())], value=Constant(value='Module')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='itype', ctx=Load()), attr='extra_attrs', ctx=Load()), Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='extra_attrs', ctx=Load()), attr='mod_name', ctx=Load()), Name(id='module_names', ctx=Load())]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='base_str', ctx=Load()), conversion=-1), Constant(value=' "'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='extra_attrs', ctx=Load()), attr='mod_name', ctx=Load()), conversion=-1), Constant(value='"')]))], orelse=[]), Return(value=Name(id='base_str', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='typing._SpecialForm')]), body=[Return(value=Constant(value='<typing special form>'))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[In()], comparators=[Name(id='reverse_builtin_aliases', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_lowercase_names', ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id='alias', ctx=Store())], value=Subscript(value=Name(id='reverse_builtin_aliases', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='base_str', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='alias', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), BoolOp(op=And(), values=[Name(id='fullnames', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[In()], comparators=[Name(id='fullnames', ctx=Load())])])]), body=[Assign(targets=[Name(id='base_str', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()))], orelse=[Assign(targets=[Name(id='base_str', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()))])]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='itype', ctx=Load()), attr='args', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='has_type_var_tuple_type', ctx=Load())), body=[Return(value=Name(id='base_str', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='base_str', ctx=Load()), op=Add(), right=Constant(value='[()]')))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='itype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.tuple')]), body=[Assign(targets=[Name(id='item_type_str', ctx=Store())], value=Call(func=Name(id='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='itype', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_lowercase_names', ctx=Load()), args=[], keywords=[]), body=Constant(value='tuple'), orelse=Constant(value='Tuple')), conversion=-1), Constant(value='['), FormattedValue(value=Name(id='item_type_str', ctx=Load()), conversion=-1), Constant(value=', ...]')]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='base_str', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Call(func=Name(id='format_list', ctx=Load()), args=[Attribute(value=Name(id='itype', ctx=Load()), attr='args', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='UnpackType', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_star_unpack', ctx=Load()), args=[], keywords=[]), body=[Return(value=JoinedStr(values=[Constant(value='*'), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='type', ctx=Load())], keywords=[]), conversion=-1)]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='Unpack['), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='type', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TypeVarType', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='typ', ctx=Load()), attr='name', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TypeVarTupleType', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='typ', ctx=Load()), attr='name', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='ParamSpecType', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='prefix', ctx=Load()), attr='arg_types', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='format_callable_args', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='prefix', ctx=Load()), attr='arg_types', ctx=Load()), Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='prefix', ctx=Load()), attr='arg_kinds', ctx=Load()), Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='prefix', ctx=Load()), attr='arg_names', ctx=Load()), Name(id='format', ctx=Load()), Name(id='verbosity', ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1), Constant(value=', **'), FormattedValue(value=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='name_with_suffix', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='name_with_suffix', ctx=Load()), args=[], keywords=[]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TupleType', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='partial_fallback', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='builtins.tuple')]), body=[Return(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='partial_fallback', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='type_items', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='format_list', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load())], keywords=[]), Constant(value='()')])), If(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_lowercase_names', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value='tuple['), FormattedValue(value=Name(id='type_items', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value='Tuple['), FormattedValue(value=Name(id='type_items', ctx=Load()), conversion=-1), Constant(value=']')]))]), Return(value=Name(id='s', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TypedDictType', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='is_anonymous', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='fallback', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='item_name', ctx=Store()), Name(id='item_type', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='modifier', ctx=Store())], value=IfExp(test=Compare(left=Name(id='item_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='typ', ctx=Load()), attr='required_keys', ctx=Load())]), body=Constant(value=''), orelse=Constant(value='?'))), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='item_name', ctx=Load()), conversion=114), FormattedValue(value=Name(id='modifier', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Name(id='item_type', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value='TypedDict({'), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), conversion=-1), Constant(value='})')])), Return(value=Name(id='s', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='LiteralType', ctx=Load())], keywords=[]), body=[Return(value=JoinedStr(values=[Constant(value='Literal['), FormattedValue(value=Call(func=Name(id='format_literal_value', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='UnionType', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='literal_items', ctx=Store()), Name(id='union_items', ctx=Store())], ctx=Store())], value=Call(func=Name(id='separate_union_literals', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='literal_items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='literal_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Literal[{}]'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='format_literal_value', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Name(id='literal_items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='union_items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Name(id='get_proper_type', ctx=Load()), args=[Subscript(value=Name(id='union_items', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Name(id='NoneType', ctx=Load())], keywords=[])]), body=[Return(value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_or_syntax', ctx=Load()), args=[], keywords=[]), body=JoinedStr(values=[FormattedValue(value=Name(id='literal_str', ctx=Load()), conversion=-1), Constant(value=' | None')]), orelse=JoinedStr(values=[Constant(value='Optional['), FormattedValue(value=Name(id='literal_str', ctx=Load()), conversion=-1), Constant(value=']')])))], orelse=[If(test=Name(id='union_items', ctx=Load()), body=[Return(value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_or_syntax', ctx=Load()), args=[], keywords=[]), body=JoinedStr(values=[FormattedValue(value=Name(id='literal_str', ctx=Load()), conversion=-1), Constant(value=' | '), FormattedValue(value=Call(func=Name(id='format_union', ctx=Load()), args=[Name(id='union_items', ctx=Load())], keywords=[]), conversion=-1)]), orelse=JoinedStr(values=[Constant(value='Union['), FormattedValue(value=Call(func=Name(id='format_list', ctx=Load()), args=[Name(id='union_items', ctx=Load())], keywords=[]), conversion=-1), Constant(value=', '), FormattedValue(value=Name(id='literal_str', ctx=Load()), conversion=-1), Constant(value=']')])))], orelse=[Return(value=Name(id='literal_str', ctx=Load()))])])], orelse=[Assign(targets=[Name(id='print_as_optional', ctx=Store())], value=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), Name(id='NoneType', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), ops=[Eq()], comparators=[Constant(value=1)])), If(test=Name(id='print_as_optional', ctx=Load()), body=[Assign(targets=[Name(id='rest', ctx=Store())], value=ListComp(elt=Name(id='t', ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), Name(id='NoneType', ctx=Load())], keywords=[]))], is_async=0)])), Return(value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_or_syntax', ctx=Load()), args=[], keywords=[]), body=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Subscript(value=Name(id='rest', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), conversion=-1), Constant(value=' | None')]), orelse=JoinedStr(values=[Constant(value='Optional['), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Subscript(value=Name(id='rest', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')])))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_or_syntax', ctx=Load()), args=[], keywords=[]), body=Call(func=Name(id='format_union', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load())], keywords=[]), orelse=JoinedStr(values=[Constant(value='Union['), FormattedValue(value=Call(func=Name(id='format_list', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='items', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')])))]), Return(value=Name(id='s', ctx=Load()))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='NoneType', ctx=Load())], keywords=[]), body=[Return(value=Constant(value='None'))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='AnyType', ctx=Load())], keywords=[]), body=[Return(value=Constant(value='Any'))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='DeletedType', ctx=Load())], keywords=[]), body=[Return(value=Constant(value='<deleted>'))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='UninhabitedType', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='typ', ctx=Load()), attr='is_noreturn', ctx=Load()), body=[Return(value=Constant(value='NoReturn'))], orelse=[Return(value=Constant(value='Never'))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='TypeType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='type_name', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='use_lowercase_names', ctx=Load()), args=[], keywords=[]), body=Constant(value='type'), orelse=Constant(value='Type'))), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='type_name', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='item', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='FunctionLike', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='func', ctx=Store())], value=Name(id='typ', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='func', ctx=Load()), attr='is_type_obj', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Name(id='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TypeType', ctx=Load()), attr='make_normalized', ctx=Load()), args=[Call(func=Name(id='erase_type', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='func', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='ret_type', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='CallableType', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='func', ctx=Load()), attr='type_guard', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='return_type', ctx=Store())], value=JoinedStr(values=[Constant(value='TypeGuard['), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='type_guard', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[Assign(targets=[Name(id='return_type', ctx=Store())], value=Call(func=Name(id='format', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='ret_type', ctx=Load())], keywords=[]))]), If(test=Attribute(value=Name(id='func', ctx=Load()), attr='is_ellipsis_args', ctx=Load()), body=[Return(value=JoinedStr(values=[Constant(value='Callable[..., '), FormattedValue(value=Name(id='return_type', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), Assign(targets=[Name(id='param_spec', ctx=Store())], value=Call(func=Attribute(value=Name(id='func', ctx=Load()), attr='param_spec', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='param_spec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=JoinedStr(values=[Constant(value='Callable['), FormattedValue(value=Call(func=Name(id='format', ctx=Load()), args=[Name(id='param_spec', ctx=Load())], keywords=[]), conversion=-1), Constant(value=', '), FormattedValue(value=Name(id='return_type', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='format_callable_args', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='arg_types', ctx=Load()), Attribute(value=Name(id='func', ctx=Load()), attr='arg_kinds', ctx=Load()), Attribute(value=Name(id='func', ctx=Load()), attr='arg_names', ctx=Load()), Name(id='format', ctx=Load()), Name(id='verbosity', ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[Constant(value='Callable[['), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1), Constant(value='], '), FormattedValue(value=Name(id='return_type', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[Return(value=Constant(value='overloaded function'))])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='UnboundType', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='typ', ctx=Load()), attr='accept', ctx=Load()), args=[Call(func=Name(id='TypeStrVisitor', ctx=Load()), args=[], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='Parameters', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='format_callable_args', ctx=Load()), args=[Attribute(value=Name(id='typ', ctx=Load()), attr='arg_types', ctx=Load()), Attribute(value=Name(id='typ', ctx=Load()), attr='arg_kinds', ctx=Load()), Attribute(value=Name(id='typ', ctx=Load()), attr='arg_names', ctx=Load()), Name(id='format', ctx=Load()), Name(id='verbosity', ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Type is None')], keywords=[]))], orelse=[Return(value=Constant(value='object'))])])])])])])])])])])])])])])])])])])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='collect_all_instances', args=arguments(posonlyargs=[], args=[arg(arg='t', annotation=Name(id='Type', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return all instances that `t` contains (including `t`).\n\n    This is similar to collect_all_inner_types from typeanal but only\n    returns instances and will recurse into fallbacks.\n    ')), Assign(targets=[Name(id='visitor', ctx=Store())], value=Call(func=Name(id='CollectAllInstancesQuery', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='accept', ctx=Load()), args=[Name(id='visitor', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='visitor', ctx=Load()), attr='instances', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Instance', ctx=Load()), ctx=Load()), type_params=[]), ClassDef(name='CollectAllInstancesQuery', bases=[Name(id='TypeTraverserVisitor', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='instances', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Instance', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='visit_instance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='t', annotation=Name(id='Instance', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='instances', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='visit_instance', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='visit_type_alias_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='t', annotation=Name(id='TypeAliasType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='t', ctx=Load()), attr='alias', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='t', ctx=Load()), attr='is_recursive', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='t', ctx=Load()), attr='alias', ctx=Load()), attr='target', ctx=Load()), attr='accept', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='visit_type_alias_type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], decorator_list=[], type_params=[]), FunctionDef(name='find_type_overlaps', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='types', annotation=Name(id='Type', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a set of fullnames that share a short name and appear in either type.\n\n    This is used to ensure that distinct types with the same short name are printed\n    with their fullname.\n    ')), AnnAssign(target=Name(id='d', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='type', ctx=Store()), iter=Name(id='types', ctx=Load()), body=[For(target=Name(id='inst', ctx=Store()), iter=Call(func=Name(id='collect_all_instances', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='inst', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='inst', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='shortname', ctx=Store()), iter=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=JoinedStr(values=[Constant(value='typing.'), FormattedValue(value=Name(id='shortname', ctx=Load()), conversion=-1)]), ops=[In()], comparators=[Name(id='TYPES_FOR_UNIMPORTED_HINTS', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='shortname', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[Constant(value='typing.'), FormattedValue(value=Name(id='shortname', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[]), AnnAssign(target=Name(id='overlaps', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='fullnames', ctx=Store()), iter=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fullnames', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='overlaps', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='fullnames', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='overlaps', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='format_type', args=arguments(posonlyargs=[], args=[arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='options', annotation=Name(id='Options', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='module_names', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Convert a type to a relatively short string suitable for error messages.\n\n    `verbosity` is a coarse grained control on the verbosity of the type\n\n    This function returns a string appropriate for unmodified use in error\n    messages; this means that it will be quoted in most cases.  If\n    modification of the formatted string is required, callers should use\n    format_type_bare.\n    ')), Return(value=Call(func=Name(id='quote_type_string', ctx=Load()), args=[Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='options', ctx=Load()), Name(id='verbosity', ctx=Load()), Name(id='module_names', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_type_bare', args=arguments(posonlyargs=[], args=[arg(arg='typ', annotation=Name(id='Type', ctx=Load())), arg(arg='options', annotation=Name(id='Options', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='module_names', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Convert a type to a relatively short string suitable for error messages.\n\n    `verbosity` is a coarse grained control on the verbosity of the type\n    `fullnames` specifies a set of names that should be printed in full\n\n    This function will return an unquoted string.  If a caller doesn't need to\n    perform post-processing on the string output, format_type should be used\n    instead.  (The caller may want to use quote_type_string after\n    processing has happened, to maintain consistent quoting in messages.)\n    ")), Return(value=Call(func=Name(id='format_type_inner', ctx=Load()), args=[Name(id='typ', ctx=Load()), Name(id='verbosity', ctx=Load()), Name(id='options', ctx=Load()), Call(func=Name(id='find_type_overlaps', ctx=Load()), args=[Name(id='typ', ctx=Load())], keywords=[]), Name(id='module_names', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_type_distinctly', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='types', annotation=Name(id='Type', ctx=Load())), kwonlyargs=[arg(arg='options', annotation=Name(id='Options', ctx=Load())), arg(arg='bare', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Jointly format types to distinct strings.\n\n    Increase the verbosity of the type strings until they become distinct\n    while also requiring that distinct types with the same short name are\n    formatted distinctly.\n\n    By default, the returned strings are created using format_type() and will be\n    quoted accordingly. If ``bare`` is True, the returned strings will not\n    be quoted; callers who need to do post-processing of the strings before\n    quoting them (such as prepending * or **) should use this.\n    ')), Assign(targets=[Name(id='overlapping', ctx=Store())], value=Call(func=Name(id='find_type_overlaps', ctx=Load()), args=[Starred(value=Name(id='types', ctx=Load()), ctx=Load())], keywords=[])), For(target=Name(id='verbosity', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='strs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='format_type_inner', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[keyword(arg='verbosity', value=Name(id='verbosity', ctx=Load())), keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='fullnames', value=Name(id='overlapping', ctx=Load()))]), generators=[comprehension(target=Name(id='type', ctx=Store()), iter=Name(id='types', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='strs', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='strs', ctx=Load())], keywords=[])]), body=[Break()], orelse=[])], orelse=[]), If(test=Name(id='bare', ctx=Load()), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='strs', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='quote_type_string', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='strs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='pretty_class_or_static_decorator', args=arguments(posonlyargs=[], args=[arg(arg='tp', annotation=Name(id='CallableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return @classmethod or @staticmethod, if any, for the given callable type.')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), Name(id='SYMBOL_FUNCBASE_TYPES', ctx=Load())], keywords=[])]), body=[If(test=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), attr='is_class', ctx=Load()), body=[Return(value=Constant(value='@classmethod'))], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), attr='is_static', ctx=Load()), body=[Return(value=Constant(value='@staticmethod'))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), type_params=[]), FunctionDef(name='pretty_callable', args=arguments(posonlyargs=[], args=[arg(arg='tp', annotation=Name(id='CallableType', ctx=Load())), arg(arg='options', annotation=Name(id='Options', ctx=Load())), arg(arg='skip_self', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return a nice easily-readable representation of a callable type.\n    For example:\n        def [T <: int] f(self, x: int, y: T) -> None\n\n    If skip_self is True, print an actual callable type, as it would appear\n    when bound on an instance/class, rather than how it would appear in the\n    defining statement.\n    ')), Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='asterisk', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='slash', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='arg_types', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Name(id='s', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value=', '))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='is_named', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Name(id='asterisk', ctx=Load()))]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value='*, ')), Assign(targets=[Name(id='asterisk', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR', ctx=Load())]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value='*')), Assign(targets=[Name(id='asterisk', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR2', ctx=Load())]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value='**'))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_names', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Name(id='name', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value=': ')))], orelse=[]), Assign(targets=[Name(id='type_str', ctx=Store())], value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_types', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='ARG_STAR2', ctx=Load())]), Attribute(value=Name(id='tp', ctx=Load()), attr='unpack_kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='type_str', ctx=Store())], value=JoinedStr(values=[Constant(value='Unpack['), FormattedValue(value=Name(id='type_str', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Name(id='type_str', ctx=Load())), If(test=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='is_optional', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value=' = ...'))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='slash', ctx=Load())), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='is_positional', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='arg_types', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), BoolOp(op=Or(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_names', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tp', ctx=Load()), attr='arg_kinds', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), attr='is_positional', ctx=Load()), args=[], keywords=[]))])])]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value=', /')), Assign(targets=[Name(id='slash', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), Name(id='FuncDef', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), Constant(value='arguments')], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='tp', ctx=Load()), attr='from_concatenate', ctx=Load()))]), body=[Assign(targets=[Name(id='definition_arg_names', ctx=Store())], value=ListComp(elt=Attribute(value=Attribute(value=Name(id='arg', ctx=Load()), attr='variable', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), attr='arguments', ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='definition_arg_names', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='arg_names', ctx=Load())], keywords=[])]), Subscript(value=Name(id='definition_arg_names', ctx=Load()), slice=Constant(value=0), ctx=Load()), UnaryOp(op=Not(), operand=Name(id='skip_self', ctx=Load()))]), body=[If(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value=', '), op=Add(), right=Name(id='s', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='definition_arg_names', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Name(id='s', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='definition', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[If(test=Attribute(value=Name(id='tp', ctx=Load()), attr='name', ctx=Load()), body=[Assign(targets=[Name(id='first_arg', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='def_extras', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='first_arg')], keywords=[])), If(test=Name(id='first_arg', ctx=Load()), body=[If(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value=', '), op=Add(), right=Name(id='s', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Name(id='first_arg', ctx=Load()), op=Add(), right=Name(id='s', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='tp', ctx=Load()), attr='name', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value=')')]))])]), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Constant(value=' -> ')), If(test=Compare(left=Attribute(value=Name(id='tp', ctx=Load()), attr='type_guard', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='TypeGuard['), FormattedValue(value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='type_guard', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]))], orelse=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Attribute(value=Name(id='tp', ctx=Load()), attr='ret_type', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))]), If(test=Attribute(value=Name(id='tp', ctx=Load()), attr='variables', ctx=Load()), body=[Assign(targets=[Name(id='tvars', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='tvar', ctx=Store()), iter=Attribute(value=Name(id='tp', ctx=Load()), attr='variables', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tvar', ctx=Load()), Name(id='TypeVarType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='upper_bound', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Attribute(value=Name(id='tvar', ctx=Load()), attr='upper_bound', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='upper_bound', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='upper_bound', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='builtins.object')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='tvars', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='tvar', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' <: '), FormattedValue(value=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='upper_bound', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='tvar', ctx=Load()), attr='values', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tvars', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} in ({})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='tvar', ctx=Load()), attr='name', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='format_type_bare', ctx=Load()), args=[Name(id='tp', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='tp', ctx=Store()), iter=Attribute(value=Name(id='tvar', ctx=Load()), attr='values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tvars', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='tvar', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tvars', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='tvar', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='tvars', ctx=Load())], keywords=[]), conversion=-1), Constant(value='] '), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='def '), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='variance_string', args=arguments(posonlyargs=[], args=[arg(arg='variance', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='variance', ctx=Load()), ops=[Eq()], comparators=[Name(id='COVARIANT', ctx=Load())]), body=[Return(value=Constant(value='covariant'))], orelse=[If(test=Compare(left=Name(id='variance', ctx=Load()), ops=[Eq()], comparators=[Name(id='CONTRAVARIANT', ctx=Load())]), body=[Return(value=Constant(value='contravariant'))], orelse=[Return(value=Constant(value='invariant'))])])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='get_missing_protocol_members', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='Instance', ctx=Load())), arg(arg='right', annotation=Name(id='Instance', ctx=Load())), arg(arg='skip', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Find all protocol members of 'right' that are not implemented\n    (i.e. completely missing) in 'left'.\n    ")), Assert(test=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='is_protocol', ctx=Load())), AnnAssign(target=Name(id='missing', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='member', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='protocol_members', ctx=Load()), body=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[In()], comparators=[Name(id='skip', ctx=Load())]), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='find_member', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='left', ctx=Load()), Name(id='left', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='missing', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='member', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='missing', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='get_conflict_protocol_types', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='Instance', ctx=Load())), arg(arg='right', annotation=Name(id='Instance', ctx=Load())), arg(arg='class_obj', annotation=Name(id='bool', ctx=Load())), arg(arg='options', annotation=BinOp(left=Name(id='Options', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value="Find members that are defined in 'left' but have incompatible types.\n    Return them as a list of ('member', 'got', 'expected').\n    ")), Assert(test=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='is_protocol', ctx=Load())), AnnAssign(target=Name(id='conflicts', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Type', ctx=Load()), Name(id='Type', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='member', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='protocol_members', ctx=Load()), body=[If(test=Compare(left=Name(id='member', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='__init__'), Constant(value='__new__')], ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='supertype', ctx=Store())], value=Call(func=Name(id='find_member', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='right', ctx=Load()), Name(id='left', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='supertype', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='subtype', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mypy', ctx=Load()), attr='typeops', ctx=Load()), attr='get_protocol_member', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='member', ctx=Load()), Name(id='class_obj', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='subtype', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='is_compat', ctx=Store())], value=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='supertype', ctx=Load())], keywords=[keyword(arg='ignore_pos_arg_names', value=Constant(value=True)), keyword(arg='options', value=Name(id='options', ctx=Load()))])), If(test=Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='get_member_flags', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='is_compat', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='is_compat', ctx=Load()), Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='supertype', ctx=Load()), Name(id='subtype', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='is_compat', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='conflicts', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='member', ctx=Load()), Name(id='subtype', ctx=Load()), Name(id='supertype', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='conflicts', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Type', ctx=Load()), Name(id='Type', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='get_bad_protocol_flags', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='Instance', ctx=Load())), arg(arg='right', annotation=Name(id='Instance', ctx=Load())), arg(arg='class_obj', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Return all incompatible attribute flags for members that are present in both\n    'left' and 'right'.\n    ")), Assert(test=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='is_protocol', ctx=Load())), AnnAssign(target=Name(id='all_flags', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='member', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='right', ctx=Load()), attr='type', ctx=Load()), attr='protocol_members', ctx=Load()), body=[If(test=Call(func=Name(id='find_member', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='left', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Tuple(elts=[Name(id='member', ctx=Load()), Call(func=Name(id='get_member_flags', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='get_member_flags', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='right', ctx=Load())], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='all_flags', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='bad_flags', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='subflags', ctx=Store()), Name(id='superflags', ctx=Store())], ctx=Store()), iter=Name(id='all_flags', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='subflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())])]), BoolOp(op=And(), values=[Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), BoolOp(op=And(), values=[Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_SETTABLE', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), BoolOp(op=And(), values=[Compare(left=Name(id='IS_CLASS_OR_STATIC', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_CLASS_OR_STATIC', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), BoolOp(op=And(), values=[Name(id='class_obj', ctx=Load()), Compare(left=Name(id='IS_VAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())]), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subflags', ctx=Load())])]), BoolOp(op=And(), values=[Name(id='class_obj', ctx=Load()), Compare(left=Name(id='IS_CLASSVAR', ctx=Load()), ops=[In()], comparators=[Name(id='superflags', ctx=Load())])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='bad_flags', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Name(id='subflags', ctx=Load()), Name(id='superflags', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='bad_flags', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='capitalize', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Capitalize the first character of a string.')), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=''))], orelse=[Return(value=BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())))])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='extract_type', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If the argument is the name of a method (of form C.m), return\n    the type portion in quotes (e.g. "y"). Otherwise, return the string\n    unmodified.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='^"[a-zA-Z0-9_]+" of '), Constant(value=''), Name(id='name', ctx=Load())], keywords=[])), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='strip_quotes', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Strip a double quote at the beginning and end of the string, if any.')), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='^"'), Constant(value=''), Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='"$'), Constant(value=''), Name(id='s', ctx=Load())], keywords=[])), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_string_list', args=arguments(posonlyargs=[], args=[arg(arg='lst', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Name(id='lst', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='lst', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Constant(value=5)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='lst', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), conversion=-1), Constant(value=' and '), FormattedValue(value=Subscript(value=Name(id='lst', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), conversion=-1)]))], orelse=[Return(value=BinOp(left=Constant(value='%s, ... and %s (%i methods suppressed)'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='lst', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]), Subscript(value=Name(id='lst', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=3))], ctx=Load())))])])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_item_name_list', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lst', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Constant(value=5)]), body=[Return(value=BinOp(left=BinOp(left=Constant(value='('), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='lst', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value=')')))], orelse=[Return(value=BinOp(left=BinOp(left=Constant(value='('), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Subscript(value=Name(id='lst', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value=', ...)')))])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='callable_name', args=arguments(posonlyargs=[], args=[arg(arg='type', annotation=Name(id='FunctionLike', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='type', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='<')])]), body=[Return(value=Call(func=Attribute(value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')]), attr='replace', ctx=Load()), args=[Constant(value=' of '), Constant(value='" of "')], keywords=[]))], orelse=[]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), type_params=[]), FunctionDef(name='for_function', args=arguments(posonlyargs=[], args=[arg(arg='callee', annotation=Name(id='CallableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='callable_name', ctx=Load()), args=[Name(id='callee', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=JoinedStr(values=[Constant(value=' for '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='wrong_type_arg_count', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='act', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='n', ctx=Load()), conversion=-1), Constant(value=' type arguments')])), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='no type arguments'))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='1 type argument'))], orelse=[])]), If(test=Compare(left=Name(id='act', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Assign(targets=[Name(id='act', ctx=Store())], value=Constant(value='none'))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='" expects '), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value=', but '), FormattedValue(value=Name(id='act', ctx=Load()), conversion=-1), Constant(value=' given')]))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='find_defining_module', args=arguments(posonlyargs=[], args=[arg(arg='modules', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='MypyFile', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='typ', annotation=Name(id='CallableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='typ', ctx=Load()), attr='definition', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='fullname', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='typ', ctx=Load()), attr='definition', ctx=Load()), attr='fullname', ctx=Load())), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='fullname', ctx=Load())]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='module_name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='.'), BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), slice=Constant(value=0), ctx=Load())), Try(body=[Return(value=Subscript(value=Name(id='modules', ctx=Load()), slice=Name(id='module_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Assert(test=Constant(value=False), msg=Constant(value="Couldn't determine module from CallableType"))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='MypyFile', ctx=Load()), op=BitOr(), right=Constant(value=None)), type_params=[]), AnnAssign(target=Name(id='COMMON_MISTAKES', ctx=Store()), annotation=Subscript(value=Name(id='Final', ctx=Load()), slice=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='add')], values=[Tuple(elts=[Constant(value='append'), Constant(value='extend')], ctx=Load())]), simple=1), FunctionDef(name='_real_quick_ratio', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='str', ctx=Load())), arg(arg='b', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='al', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bl', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Constant(value=2.0), op=Mult(), right=Call(func=Name(id='min', ctx=Load()), args=[Name(id='al', ctx=Load()), Name(id='bl', ctx=Load())], keywords=[])), op=Div(), right=BinOp(left=Name(id='al', ctx=Load()), op=Add(), right=Name(id='bl', ctx=Load()))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[]), FunctionDef(name='best_matches', args=arguments(posonlyargs=[], args=[arg(arg='current', annotation=Name(id='str', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='current', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='options', ctx=Store())], value=ListComp(elt=Name(id='o', ctx=Load()), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='options', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='_real_quick_ratio', ctx=Load()), args=[Name(id='current', ctx=Load()), Name(id='o', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0.75)])], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=50)]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=ListComp(elt=Name(id='o', ctx=Load()), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='options', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='current', ctx=Load())], keywords=[]))], keywords=[]), ops=[LtE()], comparators=[Constant(value=1)])], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='ratios', ctx=Store())], value=DictComp(key=Name(id='option', ctx=Load()), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='difflib', ctx=Load()), attr='SequenceMatcher', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='current', ctx=Load())), keyword(arg='b', value=Name(id='option', ctx=Load()))]), attr='ratio', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='option', ctx=Store()), iter=Name(id='options', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='options', ctx=Store())], value=ListComp(elt=Name(id='option', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='option', ctx=Store()), Name(id='ratio', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ratios', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='ratio', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.75)])], is_async=0)])), Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[UnaryOp(op=USub(), operand=Subscript(value=Name(id='ratios', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load())), Name(id='v', ctx=Load())], ctx=Load())))]), slice=Slice(upper=Name(id='n', ctx=Load())), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='pretty_seq', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='conjunction', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='quoted', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Constant(value='"'), op=Add(), right=Name(id='a', ctx=Load())), op=Add(), right=Constant(value='"')), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quoted', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='quoted', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quoted', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='quoted', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='conjunction', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Subscript(value=Name(id='quoted', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)]))], orelse=[]), Assign(targets=[Name(id='last_sep', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=', '), op=Add(), right=Name(id='conjunction', ctx=Load())), op=Add(), right=Constant(value=' '))), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='quoted', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Name(id='last_sep', ctx=Load())), op=Add(), right=Subscript(value=Name(id='quoted', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='append_invariance_notes', args=arguments(posonlyargs=[], args=[arg(arg='notes', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='arg_type', annotation=Name(id='Instance', ctx=Load())), arg(arg='expected_type', annotation=Name(id='Instance', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Explain that the type is invariant and give notes for how to solve the issue.')), Assign(targets=[Name(id='invariant_type', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='covariant_suggestion', ctx=Store())], value=Constant(value='')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.list')]), Compare(left=Attribute(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.list')]), Call(func=Name(id='is_subtype', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='invariant_type', ctx=Store())], value=Constant(value='List')), Assign(targets=[Name(id='covariant_suggestion', ctx=Store())], value=Constant(value='Consider using "Sequence" instead, which is covariant'))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.dict')]), Compare(left=Attribute(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins.dict')]), Call(func=Name(id='is_same_type', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id='is_subtype', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='arg_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='invariant_type', ctx=Store())], value=Constant(value='Dict')), Assign(targets=[Name(id='covariant_suggestion', ctx=Store())], value=Constant(value='Consider using "Mapping" instead, which is covariant in the value type'))], orelse=[])]), If(test=BoolOp(op=And(), values=[Name(id='invariant_type', ctx=Load()), Name(id='covariant_suggestion', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='invariant_type', ctx=Load()), conversion=-1), Constant(value='" is invariant -- see ')]), op=Add(), right=Constant(value='https://mypy.readthedocs.io/en/stable/common_issues.html#variance'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='covariant_suggestion', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='notes', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='append_numbers_notes', args=arguments(posonlyargs=[], args=[arg(arg='notes', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='arg_type', annotation=Name(id='Instance', ctx=Load())), arg(arg='expected_type', annotation=Name(id='Instance', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Explain if an unsupported type from "numbers" is used in a subtype check.')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='expected_type', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[In()], comparators=[Name(id='UNSUPPORTED_NUMBERS_TYPES', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Types from "numbers" aren\'t supported for static type checking')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='See https://peps.python.org/pep-0484/#the-numeric-tower')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='notes', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Consider using a protocol instead, such as typing.SupportsFloat')], keywords=[]))], orelse=[]), Return(value=Name(id='notes', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='make_inferred_type_note', args=arguments(posonlyargs=[], args=[arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='subtype', annotation=Name(id='Type', ctx=Load())), arg(arg='supertype', annotation=Name(id='Type', ctx=Load())), arg(arg='supertype_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Explain that the user may have forgotten to type a variable.\n\n    The user does not expect an error if the inferred container type is the same as the return\n    type of a function and the argument type(s) are a subtype of the argument type(s) of the\n    return type. This note suggests that they add a type annotation with the return type instead\n    of relying on the inferred type.\n    ')), Assign(targets=[Name(id='subtype', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='subtype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='supertype', ctx=Store())], value=Call(func=Name(id='get_proper_type', ctx=Load()), args=[Name(id='supertype', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subtype', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='supertype', ctx=Load()), Name(id='Instance', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='subtype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='supertype', ctx=Load()), attr='type', ctx=Load()), attr='fullname', ctx=Load())]), Attribute(value=Name(id='subtype', ctx=Load()), attr='args', ctx=Load()), Attribute(value=Name(id='supertype', ctx=Load()), attr='args', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='context', ctx=Load()), Name(id='ReturnStmt', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='context', ctx=Load()), attr='expr', ctx=Load()), Name(id='NameExpr', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='context', ctx=Load()), attr='expr', ctx=Load()), attr='node', ctx=Load()), Name(id='Var', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Attribute(value=Name(id='context', ctx=Load()), attr='expr', ctx=Load()), attr='node', ctx=Load()), attr='is_inferred', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='subtype_arg', ctx=Store()), Name(id='supertype_arg', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='subtype', ctx=Load()), attr='args', ctx=Load()), Attribute(value=Name(id='supertype', ctx=Load()), attr='args', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_subtype', ctx=Load()), args=[Name(id='subtype_arg', ctx=Load()), Name(id='supertype_arg', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=''))], orelse=[])], orelse=[]), Assign(targets=[Name(id='var_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='context', ctx=Load()), attr='expr', ctx=Load()), attr='name', ctx=Load())), Return(value=Call(func=Attribute(value=Constant(value='Perhaps you need a type annotation for "{}"? Suggestion: {}'), attr='format', ctx=Load()), args=[Name(id='var_name', ctx=Load()), Name(id='supertype_str', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[]), FunctionDef(name='format_key_list', args=arguments(posonlyargs=[], args=[arg(arg='keys', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='short', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Assign(targets=[Name(id='formatted_keys', ctx=Store())], value=ListComp(elt=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='td', ctx=Store())], value=IfExp(test=Name(id='short', ctx=Load()), body=Constant(value=''), orelse=Constant(value='TypedDict '))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=JoinedStr(values=[Constant(value='no '), FormattedValue(value=Name(id='td', ctx=Load()), conversion=-1), Constant(value='keys')]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='td', ctx=Load()), conversion=-1), Constant(value='key '), FormattedValue(value=Subscript(value=Name(id='formatted_keys', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='td', ctx=Load()), conversion=-1), Constant(value='keys ('), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='formatted_keys', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]))])])], decorator_list=[], returns=Name(id='str', ctx=Load()), type_params=[])], type_ignores=[])